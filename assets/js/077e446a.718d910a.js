"use strict";(self.webpackChunkTHM_Notes=self.webpackChunkTHM_Notes||[]).push([[8763],{897:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=t(4848),i=t(8453);const r={},a="Basic scripts",o={id:"Others/Bash Scripting",title:"Bash Scripting",description:"Bash is a scripting language that runs within the terminal on most Linux distros, as well as MacOS. Shell scripts are a sequence of bash commands within a file, combined together to achieve more complex tasks than simple one-liner and are especially useful when it comes to automating sysadmin tasks such as backups.",source:"@site/docs/Others/Bash Scripting.md",sourceDirName:"Others",slug:"/Others/Bash Scripting",permalink:"/docs/Others/Bash Scripting",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"THMSidebar",previous:{title:"The Witch's Cauldron",permalink:"/docs/Events/The Witch's Cauldron"},next:{title:"GoogleDorking",permalink:"/docs/Others/GoogleDorking"}},h={},l=[{value:"If statement",id:"if-statement",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"#Skills"}),"\n",(0,s.jsx)(n.p,{children:"Bash is a scripting language that runs within the terminal on most Linux distros, as well as MacOS. Shell scripts are a sequence of bash commands within a file, combined together to achieve more complex tasks than simple one-liner and are especially useful when it comes to automating sysadmin tasks such as backups."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://devhints.io/bash",children:"devhints.io"})}),"\n",(0,s.jsx)(n.h1,{id:"basic-scripts",children:"Basic scripts"}),"\n",(0,s.jsxs)(n.p,{children:["A bash script always starts with ",(0,s.jsx)(n.code,{children:"#!/bin/bash"}),".\nThis is so your shell (whatever type of it) knows that it needs to run your file using bash in the terminal."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'#!/bin/bash\n\necho "Hellow World!"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This will return the string \u201cHello World\u201d. The command \u201c",(0,s.jsx)(n.code,{children:"echo"}),"\u201d is used to output text to the screen."]}),"\n",(0,s.jsx)(n.p,{children:"You can also perform normal Linux commands inside your bash script and it will be executed if formatted right."}),"\n",(0,s.jsxs)(n.p,{children:["Now to run our bash script we must first give it executable permissions",(0,s.jsx)(n.code,{children:"Chmod +x yourfile.sh"})]}),"\n",(0,s.jsxs)(n.p,{children:["And then we run it using ",(0,s.jsx)(n.code,{children:"./"})]}),"\n",(0,s.jsx)(n.h1,{id:"variables",children:"Variables"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'name="Gabriel"'})}),"\n",(0,s.jsxs)(n.p,{children:["Please note that for variables to work you cannot leave a space between the variable name, the \u201d",(0,s.jsx)(n.strong,{children:"="}),"\u201d and the value. They cannot have spaces in."]}),"\n",(0,s.jsxs)(n.p,{children:["We have to add a ",(0,s.jsx)(n.code,{children:"$"})," onto front of our variable name in order to use it."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"echo $name"})}),"\n",(0,s.jsx)(n.p,{children:"Variables make it much easier to store data and rather than typing out the same thing in multiple places we could simply insert our variable with $var and then declare that to a certain value making it easier to fall back on if you do something wrong and need to change it."}),"\n",(0,s.jsx)(n.p,{children:"Debugging is a very important part of programming so we should get used to problem solving and fixing errors as early as possible. And bash has a few built in features that make our life simple."}),"\n",(0,s.jsxs)(n.p,{children:["When running at the command line you can do\n",(0,s.jsx)(n.code,{children:"bash -x ./file.sh"})]}),"\n",(0,s.jsxs)(n.p,{children:["This tells you which lines are working and which lines are not.\xa0If you want to debug at a certain point you can insert ",(0,s.jsx)(n.code,{children:"set -x"})," into your script and ",(0,s.jsx)(n.code,{children:"set +x"})," to end the section"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'#!/bin/bash\n\necho "hi"\nset -x\n#this section will be debugged\nset +x\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can see its outputting a ",(0,s.jsx)(n.strong,{children:"+"})," for the command and then the output of what that command executed. If there was an error it would output a ",(0,s.jsx)(n.strong,{children:"-"})," on that line this makes it easy to spot where you have gone wrong so you can fix them."]}),"\n",(0,s.jsx)(n.h1,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.p,{children:'We will firstly\xa0look at parameters specified using the command line when running the file. These come in many forms but often have the "$" prefix because a parameter is still a variable.'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"#!/bin/bash\n\nname=$1\n\necho $name\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We now run our script with ",(0,s.jsx)(n.code,{children:"./example.sh Gabriel"}),"\nAnd sure enough we get returned with \u201cGabriel\u201d."]}),"\n",(0,s.jsxs)(n.p,{children:["We can simply add a ",(0,s.jsx)(n.code,{children:"$2"})," to add 2nd argument."]}),"\n",(0,s.jsxs)(n.p,{children:["What if we didn't want to supply them like this however, and instead it would let us type in our name in a more interactive way, we can do this using ",(0,s.jsx)(n.code,{children:"read"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'#!/bin/bash\necho Enter your name\nread name\necho "Your name is $name"\n'})}),"\n",(0,s.jsx)(n.p,{children:"This code will hang after its ran, this gives you the opportunity to type in your name."}),"\n",(0,s.jsxs)(n.p,{children:["Get the number of arguments supplied to a script: ",(0,s.jsx)(n.code,{children:"$#"}),"\nGet the number of arguments supplied to a script: ",(0,s.jsx)(n.code,{children:"$0"})]}),"\n",(0,s.jsx)(n.h1,{id:"arrays",children:"Arrays"}),"\n",(0,s.jsxs)(n.p,{children:["Arrays are used to store multiple pieces of data in one variable, which can then be extracted by using an index. Most commonly notated as\xa0",(0,s.jsx)(n.code,{children:"var[index_position]"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Arrays use indexing meaning that each item in an array stands for a number."}),"\n",(0,s.jsx)(n.p,{children:"All indexes start at position 0."}),"\n",(0,s.jsxs)(n.p,{children:["The syntax is ",(0,s.jsx)(n.code,{children:"transport=('car' 'train' 'bike' 'bus')"}),".\nWe then wrap each item in brackets leaving a space between each item."]}),"\n",(0,s.jsxs)(n.p,{children:["We can then echo out all the elements in our array like this",(0,s.jsx)(n.code,{children:'echo "${transport[@]}"'}),'. Where the "@" means all arguments, and the [] wrapped around it specifies its index.']}),"\n",(0,s.jsxs)(n.p,{children:["The last thing we will cover is if we want to change an element, or delete it.\xa0If we wanted to remove an element we would use the\xa0",(0,s.jsx)(n.code,{children:"unset"}),"\xa0utility.\n",(0,s.jsx)(n.code,{children:"unset transport[1]"})]}),"\n",(0,s.jsxs)(n.p,{children:["Now lets set it to something else. We can do\n",(0,s.jsx)(n.code,{children:"transport[1]='trainride'"})]}),"\n",(0,s.jsxs)(n.p,{children:["If we echo the array then we get\n",(0,s.jsx)(n.code,{children:"car trainride bike bus"})]}),"\n",(0,s.jsx)(n.h1,{id:"conditionals",children:"Conditionals"}),"\n",(0,s.jsx)(n.h2,{id:"if-statement",children:"If statement"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"if [ something comparison somthing else]\nthen\n\tsomething\nelse\n\tsomething different\nfi\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'#!/bin/bash\n\ncount=10\n\nif [ $count -eq 10]\nthen\n\techo "true"\nelse\n\techo "false"\nfi\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If statements always use a pair of brackets and in the case of the [] we need to leave a space on both sides of the text(the bash syntax). We also always need to end the if statement with ",(0,s.jsx)(n.code,{children:"fi"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"-eq"})," is one way of doing this, you could also use \u201c",(0,s.jsx)(n.strong,{children:"="}),"\u201d"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Operator"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-eq"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Checks if the value of two operands are equal or not; if yes, then the condition becomes true."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-ne"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Checks if the value of two operands are equal or not; if values are not equal, then the condition becomes true."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-gt"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Checks if the value of left operand is greater than the value of right operand; if yes, then the condition becomes true."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-lt"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Checks if the value of left operand is less than the value of right operand; if yes, then the condition becomes true."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"-ge"}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"Checks if the value of left operand is greater than or equal to the value of right operand; if yes, then the condition becomes true."})]})]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'#!/bin/bash\n\nfilename=$1\n\nif [ -f "$filename" ] && [ -w "$filename" ]\nthen\n\techo "hello" > $filename\nelse\n\ttouch "$filename"\n\techo "hello" > $filename\nfi\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"-f"})," checked if the file existed."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"-w"})," checked if the file was writable, without write permissions we wouldn't be able to output our text into the file."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.codewars.com/",children:"CodeWars"}),"\n",(0,s.jsx)(n.a,{href:"https://www.hackerrank.com/",children:"HackerRank"})]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);