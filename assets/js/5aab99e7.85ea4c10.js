"use strict";(self.webpackChunkTHM_Notes=self.webpackChunkTHM_Notes||[]).push([[3058],{6346:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var n=s(4848),r=s(8453);const i={},o="Positions",d={id:"Jr Penetration Tester/Burp Suite/Intruder",title:"Intruder",description:"Burp_Suite #tools",source:"@site/docs/Jr Penetration Tester/Burp Suite/Intruder.md",sourceDirName:"Jr Penetration Tester/Burp Suite",slug:"/Jr Penetration Tester/Burp Suite/Intruder",permalink:"/docs/Jr Penetration Tester/Burp Suite/Intruder",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"THMSidebar",previous:{title:"Extensions",permalink:"/docs/Jr Penetration Tester/Burp Suite/Extensions"},next:{title:"Other Modules",permalink:"/docs/Jr Penetration Tester/Burp Suite/Other Modules"}},l={},a=[{value:"Sniper",id:"sniper",level:2},{value:"Battering Ram",id:"battering-ram",level:2},{value:"Cluster Bomb",id:"cluster-bomb",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"#Web #Burp_Suite #tools"}),"\n",(0,n.jsx)(t.p,{children:"Intruder allows for automated request modification and repetitive testing with variations in input values."}),"\n",(0,n.jsxs)(t.p,{children:["Intruder's functionality is comparable to command-line tools like ",(0,n.jsx)(t.strong,{children:"Wfuzz"})," or ",(0,n.jsx)(t.strong,{children:"ffuf"}),"."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Intruder",src:s(4464).A+"",width:"1118",height:"540"})}),"\n",(0,n.jsxs)(t.p,{children:["To sending the request from Proxy module to Intruder, we can press ",(0,n.jsx)(t.code,{children:"Ctrl + I"})]}),"\n",(0,n.jsx)(t.h1,{id:"positions",children:"Positions"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Intruder_Positions",src:s(2795).A+"",width:"1123",height:"584"})}),"\n",(0,n.jsxs)(t.p,{children:["Burp Suite automatically attempts to identify the most probable positions where payloads can be inserted by using section mark ",(0,n.jsx)(t.code,{children:"\xa7"}),"."]}),"\n",(0,n.jsx)(t.h1,{id:"payloads",children:"Payloads"}),"\n",(0,n.jsxs)(t.p,{children:["It has four sections\n",(0,n.jsx)(t.img,{alt:"Intruder_Payloads",src:s(7970).A+"",width:"1042",height:"918"})]}),"\n",(0,n.jsx)(t.h1,{id:"attack-type",children:"Attack Type"}),"\n",(0,n.jsx)(t.p,{children:"It offers four attack types"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Sniper: It is the default and most commonly used option. It cycles through the payloads, inserting one payload at a time into each position defined in the request. Sniper attacks iterate through all the payloads in a linear fashion, allowing for precise and focused testing."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Battering ram: It differs from Sniper in that it sends all payloads simultaneously, each payload inserted into its respective position. This attack type is useful when testing for race conditions or when payloads need to be sent concurrently."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Pitchfork: It enables the simultaneous testing of multiple positions with different payloads. It allows the tester to define multiple payload sets, each associated with a specific position in the request. Pitchfork attacks are effective when there are distinct parameters that need separate testing."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Cluster bomb: It combines the Sniper and Pitchfork approaches. It performs a Sniper-like attack on each position but simultaneously tests all payloads from each set. This attack type is useful when multiple positions have different payloads, and we want to test them all together."}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"sniper",children:"Sniper"}),"\n",(0,n.jsx)(t.p,{children:"It is the default and most commonly used attack type. It is effective for single-position attacks, such as password brute-force or fuzzing for API endpoints."}),"\n",(0,n.jsxs)(t.p,{children:["If we have a wordlist with three words (",(0,n.jsx)(t.code,{children:"burp"}),", ",(0,n.jsx)(t.code,{children:"suite"}),", and ",(0,n.jsx)(t.code,{children:"intruder"}),"):"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Request Number"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Request Body"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"1"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"username=burp&password=Expl01ted"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"2"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"username=suite&password=Expl01ted"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"3"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"username=intruder&password=Expl01ted"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"4"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"username=pentester&password=burp"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"5"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"username=pentester&password=suite"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"6"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"username=pentester&password=intruder"})})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:["Intruder starts with the first position (",(0,n.jsx)(t.code,{children:"username"}),") and substitutes each payload into it, then moves to the second position (",(0,n.jsx)(t.code,{children:"password"}),") and performs the same substitution with the payloads. The total number of requests made by Intruder Sniper can be calculated as ",(0,n.jsx)(t.code,{children:"requests = numberOfWords * numberOfPositions"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"battering-ram",children:"Battering Ram"}),"\n",(0,n.jsx)(t.p,{children:"It differs from Sniper in that it places the same payload in every position simultaneously, rather than substituting each payload into each position in turn."}),"\n",(0,n.jsxs)(t.p,{children:["If we have a wordlist with three words (",(0,n.jsx)(t.code,{children:"burp"}),", ",(0,n.jsx)(t.code,{children:"suite"}),", and ",(0,n.jsx)(t.code,{children:"intruder"}),"):"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Request Number"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Request Body"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"1"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"username=burp&password=burp"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"2"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"username=suite&password=suite"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"3"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"username=intruder&password=intruder"})})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"Each payload from the wordlist is inserted into every position for each request made. In a Battering Ram attack, the same payload is thrown at every defined position simultaneously, providing a brute-force-like approach to testing."}),"\n",(0,n.jsx)(t.h1,{id:"pitchfork",children:"Pitchfork"}),"\n",(0,n.jsx)(t.p,{children:"It is similar to having multiple Sniper attacks running simultaneosly. Pitchfork utilises one payload set per position (up to a maximum of 20) and iterates through them all simultaneously."}),"\n",(0,n.jsxs)(t.p,{children:["If we have two wordlists, the first wordlist contains usernames: ",(0,n.jsx)(t.code,{children:"joel"}),", ",(0,n.jsx)(t.code,{children:"harriet"}),", and ",(0,n.jsx)(t.code,{children:"alex"}),", the second wordlist contains passwords: ",(0,n.jsx)(t.code,{children:"J03l"}),", ",(0,n.jsx)(t.code,{children:"Emma1815"}),", and ",(0,n.jsx)(t.code,{children:"Sk1ll"}),"."]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Request Number"}),(0,n.jsx)(t.th,{children:"Request Body"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=joel&password=J03l"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"2"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=harriet&password=Emma1815"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"3"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=alex&password=Sk1ll"})})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"Pitchfork takes the first item from each list and substitutes them into the request, one per position. It then repeats this process for the next request by taking the second item from each list and substituting it into the template. Intruder continues this iteration until one or all of the lists run out of items. It's important to note that Intruder stops testing as soon as one of the lists is complete."}),"\n",(0,n.jsx)(t.h2,{id:"cluster-bomb",children:"Cluster Bomb"}),"\n",(0,n.jsx)(t.p,{children:"It allows us to choose multiple payload sets, one per position (up to a maximum of 20). Cluster bomb iterates through each payload set individually, ensuring that every possible combination of payloads is tested."}),"\n",(0,n.jsxs)(t.p,{children:["If we have two wordlists, the first wordlist contains usernames: ",(0,n.jsx)(t.code,{children:"joel"}),", ",(0,n.jsx)(t.code,{children:"harriet"}),", and ",(0,n.jsx)(t.code,{children:"alex"}),", the second wordlist contains passwords: ",(0,n.jsx)(t.code,{children:"J03l"}),", ",(0,n.jsx)(t.code,{children:"Emma1815"}),", and ",(0,n.jsx)(t.code,{children:"Sk1ll"}),"."]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Request Number"}),(0,n.jsx)(t.th,{children:"Request Body"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"1"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=joel&password=J03l"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"2"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=harriet&password=J03l"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"3"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=alex&password=J03l"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"4"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=joel&password=Emma1815"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"5"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=harriet&password=Emma1815"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"6"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=alex&password=Emma1815"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"7"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=joel&password=Sk1ll"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"8"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=harriet&password=Sk1ll"})})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"9"}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"username=alex&password=Sk1ll"})})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"Cluster bomb attack type iterates through every combination of the provided payload sets. It tests every possibility by substituting each value from each payload set into the corresponding position in the request."}),"\n",(0,n.jsx)(t.p,{children:"Cluster bomb attacks can generate a significant amount of traffic as it tests every combination. The number of requests made by a Cluster bomb attack can be calculated by multiplying the number of lines in each payload set together. It's important to be cautious when using this attack type, especially when dealing with large payload sets."}),"\n",(0,n.jsx)(t.h1,{id:"macro",children:"Macro"}),"\n",(0,n.jsxs)(t.p,{children:["Example:\nBegin by capturing a request to ",(0,n.jsx)(t.code,{children:"http://10.10.13.122/admin/login/"})," and reviewing the response"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-html",children:'HTTP/1.1 200 OK\nServer: nginx/1.18.0 (Ubuntu)\nDate: Fri, 20 Aug 2021 22:31:16 GMT\nContent-Type: text/html; charset=utf-8\nConnection: close\nSet-Cookie: session=eyJ0b2tlbklEIjoiMzUyNTQ5ZjgxZDRhOTM5YjVlMTNlMjIzNmI0ZDlkOGEifQ.YSA-mQ.ZaKKsUnNsIb47sjlyux_LN8Qst0; HttpOnly; Path=/\nVary: Cookie\nFront-End-Https: on\nContent-Length: 3922\n---\n<form method="POST">\n    <div class="form-floating mb-3">\n        <input class="form-control" type="text" name=username  placeholder="Username" required>\n        <label for="username">Username</label>\n    </div>\n    <div class="form-floating mb-3">\n        <input class="form-control" type="password" name=password  placeholder="Password" required>\n        <label for="password">Password</label>\n    </div>\n    <input type="hidden" name="loginToken" value="84c6358bbf1bd8000b6b63ab1bd77c5e">\n    <div class="d-grid"><button class="btn btn-warning btn-lg" type="submit">Login!</button></div>\n</form>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["In this response, we notice that alongside the username and password fields, there is now a session cookie set, as well as a CSRF (",(0,n.jsx)(t.strong,{children:"Cross-Site Request Forgery"}),") token in the form as a hidden field. Refreshing the page reveals that both the ",(0,n.jsx)(t.strong,{children:"session"})," cookie and the ",(0,n.jsx)(t.strong,{children:"loginToken"})," change with each request. This means that for every login attempt, we need to extract valid values for both the session cookie and the loginToken."]}),"\n",(0,n.jsxs)(t.p,{children:["To accomplish this, we will use ",(0,n.jsx)(t.strong,{children:"Burp Macros"})," to define a repeated set of actions (macro) to be executed before each request. This macro will extract unique values for the session cookie and loginToken, replacing them in every subsequent request of our attack."]}),"\n",(0,n.jsxs)(t.p,{children:["Besides the common attack method, we need to build a macro. Macros allow us to perform the same set of actions repeatedly. In this case, we simply want to send a GET request to ",(0,n.jsx)(t.code,{children:"/admin/login/"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Setting -> Sessions -> Macros -> Add\nAnd add a new macro."}),"\n",(0,n.jsxs)(t.p,{children:['Still in the "Sessions" category of the main settings, scroll up to the "Session Handling Rules" section and choose to ',(0,n.jsx)(t.strong,{children:"Add"})," a new rule."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Fill in an appropriate description, then switch to the Scope tab."}),"\n",(0,n.jsx)(t.li,{children:'In the "Tools Scope" section, deselect every checkbox other than Intruder \u2013 we do not need this rule to apply anywhere else.'}),"\n",(0,n.jsxs)(t.li,{children:['In the "URL Scope" section, choose "Use suite scope"; this will set the macro to only operate on sites that have been added to the global scope. If you have not set a global scope, keep the "Use custom scope" option as default and add ',(0,n.jsx)(t.code,{children:"http://target_URL/"})," to the scope in this section."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:['Now we need to switch back over to the Details tab and look at the "Rule Actions" section.\nClick the ',(0,n.jsx)(t.strong,{children:"Add"}),'\xa0button, select "Run a Macro" from this list, select the macro we created earlier.']}),"\n",(0,n.jsx)(t.p,{children:"As it stands, this macro will now overwrite all of the parameters in our Intruder requests before we send them; this is great, as it means that we will get the loginTokens and session cookies added straight into our requests. That said, we should restrict which parameters and cookies are being updated before we start our attack:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:['Select "Update only the following parameters and headers", then click the ',(0,n.jsx)(t.strong,{children:"Edit"}),"\xa0button next to the input box below the radio button."]}),"\n",(0,n.jsxs)(t.li,{children:['In the "Enter a new item" text field, type "loginToken". Press ',(0,n.jsx)(t.strong,{children:"Add"}),", then ",(0,n.jsx)(t.strong,{children:"Close"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:['Select "Update only the following cookies", then click the relevant ',(0,n.jsx)(t.strong,{children:"Edit"})," button."]}),"\n",(0,n.jsxs)(t.li,{children:['Enter "session" in the "Enter a new item" text field. Press ',(0,n.jsx)(t.strong,{children:"Add"}),", then ",(0,n.jsx)(t.strong,{children:"Close"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["Finally, press ",(0,n.jsx)(t.strong,{children:"OK"})," to confirm our action."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"You should be getting 302 status code responses for every request in this attack. If you see 403 errors, then your macro is not working properly."})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},4464:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/Intruder_1-08785098c54b799e9710a9e48cea02ab.png"},2795:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/Intruder_2-6339dc2e0374fb86c6bd835e4c91d587.png"},7970:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/Intruder_3-411f67d0613112e1caecf2c6800e044b.png"},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>d});var n=s(6540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);