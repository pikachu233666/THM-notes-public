"use strict";(self.webpackChunkTHM_Notes=self.webpackChunkTHM_Notes||[]).push([[4901],{3031:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>h});var n=s(4848),r=s(8453);const o={},i="Terminal Text Editors",a={id:"Pre Security/Linux Fundamentals/Linux Fundamentals Part 3",title:"Linux Fundamentals Part 3",description:"Linux #System",source:"@site/docs/Pre Security/Linux Fundamentals/Linux Fundamentals Part 3.md",sourceDirName:"Pre Security/Linux Fundamentals",slug:"/Pre Security/Linux Fundamentals/Linux Fundamentals Part 3",permalink:"/docs/Pre Security/Linux Fundamentals/Linux Fundamentals Part 3",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"THMSidebar",previous:{title:"Linux Fundamentals Part 2",permalink:"/docs/Pre Security/Linux Fundamentals/Linux Fundamentals Part 2"},next:{title:"Careers in Cyber",permalink:"/docs/Introduction to Cyber Security/Introduction to Cyber Security/Careers in Cyber"}},c={},h=[];function l(e){const t={a:"a",code:"code",h1:"h1",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"#Pre-Sec #Linux #System"}),"\n",(0,n.jsx)(t.h1,{id:"terminal-text-editors",children:"Terminal Text Editors"}),"\n",(0,n.jsxs)(t.p,{children:["Nano\n",(0,n.jsx)(t.code,{children:"nano filename"})]}),"\n",(0,n.jsxs)(t.p,{children:["vim\n",(0,n.jsx)(t.code,{children:"vim filename"}),"  ",(0,n.jsx)(t.a,{href:"https://vim.rtorr.com/",children:"cheatsheets"})]}),"\n",(0,n.jsx)(t.h1,{id:"general-useful-utilities",children:"General/ Useful Utilities"}),"\n",(0,n.jsxs)(t.p,{children:["Wget\nThis command allows us to download files from the web via HTTP -- as if you were accessing the file in your browser. We simply need to provide the address of the resource that we wish to download.\n",(0,n.jsx)(t.code,{children:"wget URL"})]}),"\n",(0,n.jsx)(t.p,{children:"SCP\nSecure copy, or SCP, is just that -- a means of securely copying files. Unlike the regular cp command, this command allows you to transfer files between two computers using the SSH protocol to provide both authentication and encryption."}),"\n",(0,n.jsx)(t.p,{children:"Working on a model of SOURCE and DESTINATION, SCP allows you to"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Copy files & directories from your current system to a remote system"}),"\n",(0,n.jsx)(t.li,{children:"Copy files & directories\xa0from a remote system to your current system"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Provided that we know usernames and passwords for a user on your current system and a user on the remote system. For example, let's copy an example file from our machine to a remote machine, which I have neatly laid out in the table below"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:(0,n.jsx)(t.strong,{children:"Variable"})}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:(0,n.jsx)(t.strong,{children:"Value"})})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"The IP address of the remote system"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"192.168.1.30"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"User on the remote system"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"ubuntu"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Name of the file on the local system"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"important.txt"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Name that we wish to store the file as on the remote system"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"transferred.txt"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:["With this information, let's craft our ",(0,n.jsx)(t.code,{children:"scp"})," command (remembering that the format of SCP is just SOURCE and DESTINATION)\n",(0,n.jsx)(t.code,{children:"scp important.txt ubuntu@192.168.1.30:/home/ubuntu/transferred.txt"})]}),"\n",(0,n.jsxs)(t.p,{children:["And now let's reverse this and layout the syntax for using ",(0,n.jsx)(t.code,{children:"scp"})," to copy a file from a remote computer that we're not logged into\xa0"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:(0,n.jsx)(t.strong,{children:"Variable"})}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:(0,n.jsx)(t.strong,{children:"Value"})})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"IP address of the remote system"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"192.168.1.30"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"User on the remote system"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"ubuntu"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Name of the file on the remote system"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"documents.txt"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Name that we wish to store the file as on our system"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"notes.txt"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:["The command will now look like the following\n",(0,n.jsx)(t.code,{children:"scp ubuntu@192.168.1.30:/home/ubuntu/documents.txt notes.txt"})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Serving Files From Your Host - WEB"})}),"\n",(0,n.jsxs)(t.p,{children:['Ubuntu machines come pre-packaged with python3. Python helpfully provides a lightweight and easy-to-use module called "HTTPServer". This module turns your computer into a quick and easy web server that you can use to serve your own files, where they can then be downloaded by another computing using commands such as ',(0,n.jsx)(t.code,{children:"curl"})," and ",(0,n.jsx)(t.code,{children:"wget"}),".\xa0"]}),"\n",(0,n.jsxs)(t.p,{children:['Python3\'s "HTTPServer" will serve the files in the directory where you run the command, but this can be changed by providing options that can be found within the manual pages. Simply, all we need to do is run ',(0,n.jsx)(t.code,{children:"python3 -m\xa0 http.server"}),'\xa0in the terminal to start the module! In the snippet below, we are serving from a directory called "webserver", which has a single named "file".']}),"\n",(0,n.jsxs)(t.p,{children:["Using Python to start a web server\n",(0,n.jsx)(t.code,{children:"tryhackme@linux3:/webserver# python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ..."})]}),"\n",(0,n.jsxs)(t.p,{children:["Now, let's use ",(0,n.jsx)(t.code,{children:"wget"})," to download the file using the MACHINE_IP address and the name of the file. Remember, because the python3 server is running port 8000, you will need to specify this within your wget command."]}),"\n",(0,n.jsxs)(t.p,{children:["An example wget command of a web server running on port 8000\n",(0,n.jsx)(t.code,{children:"tryhackme@mymachine:~# wget http://MACHINE_IP:8000/myfile"})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://github.com/sc0tfree/updog",children:"What's Updog"})," A more advanced yet lightweight webserver."]}),"\n",(0,n.jsx)(t.h1,{id:"processes",children:"Processes"}),"\n",(0,n.jsx)(t.p,{children:"Processes are the programs that are running on your machine. They are managed by the kernel, where each process will have an ID associated with it, also known as its PID. The PID increments for the order In which the process starts."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Viewing Processes"}),"\n",(0,n.jsx)(t.code,{children:"ps aux"})," include the processes running by other user\n",(0,n.jsx)(t.code,{children:"top"})," real time"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Managing Processes"}),"\n",(0,n.jsx)(t.code,{children:"kill PID"}),"\nBelow are some of the signals that we can send to a process when it is killed"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"SIGTERM - Kill the process, but allow it to do some cleanup tasks beforehand"}),"\n",(0,n.jsx)(t.li,{children:"SIGKILL - Kill the process - doesn't do any cleanup after the fact"}),"\n",(0,n.jsx)(t.li,{children:"SIGSTOP - Stop/suspend a process"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"How do Processes Start?"}),"\nLet's start off by talking about namespaces. The Operating System (OS) uses namespaces to ultimately split up the resources available on the computer to (such as CPU, RAM and priority) processes. Think of it as splitting your computer up into slices -- similar to a cake. Processes within that slice will have access to a certain amount of computing power, however, it will be a small portion of what is actually available to every process overall."]}),"\n",(0,n.jsx)(t.p,{children:"Namespaces are great for security as it is a way of isolating processes from another -- only those that are in the same namespace will be able to see each other."}),"\n",(0,n.jsxs)(t.p,{children:["We previously talked about how PID works, and this is where it comes into play. The process with an ID of 0 is a process that is started when the system boots. This process is the system's init on Ubuntu, such as ",(0,n.jsx)(t.strong,{children:"systemd"}),", which is used to provide a way of managing a user's processes and sits in between the operating system and the user.\xa0"]}),"\n",(0,n.jsxs)(t.p,{children:["For example, once a system boots and it initialises, ",(0,n.jsx)(t.strong,{children:"systemd"})," is one of the first processes that are started. Any program or piece of software that we want to start will start as what's known as a child process of ",(0,n.jsx)(t.strong,{children:"systemd"}),". This means that it is controlled by ",(0,n.jsx)(t.strong,{children:"systemd"}),", but will run as its own process (although sharing the resources from ",(0,n.jsx)(t.strong,{children:"systemd"}),") to make it easier for us to identify and the likes."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Getting Processes/Services to Start on Boot"}),"\nSome applications can be started on the boot of the system that we own. For example, web servers, database servers or file transfer servers. This software is often critical and is often told to start during the boot-up of the system by administrators."]}),"\n",(0,n.jsx)(t.p,{children:"In this example, we're going to be telling the apache web server to be starting apache manually and then telling the system to launch apache2 on boot."}),"\n",(0,n.jsxs)(t.p,{children:["Enter the use of ",(0,n.jsx)(t.code,{children:"systemctl"})," -- this command allows us to interact with the ",(0,n.jsx)(t.strong,{children:"systemd"})," process/daemon. Continuing on with our example, systemctl is an easy to use command that takes the following formatting: ",(0,n.jsx)(t.code,{children:"systemctl [option] [service]"})]}),"\n",(0,n.jsxs)(t.p,{children:["For example, to tell apache to start up, we'll use ",(0,n.jsx)(t.code,{children:"systemctl start apache2"}),". Seems simple enough, right? Same with if we wanted to stop apache, we'd just replace the ",(0,n.jsx)(t.code,{children:"[option]"})," with stop (instead of start like we provided)"]}),"\n",(0,n.jsxs)(t.p,{children:["We can do four options with ",(0,n.jsx)(t.code,{children:"systemctl"})]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Start"}),"\n",(0,n.jsx)(t.li,{children:"Stop"}),"\n",(0,n.jsx)(t.li,{children:"Enable"}),"\n",(0,n.jsx)(t.li,{children:"Disable"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"An Introduction to Backgrounding and"}),"\xa0",(0,n.jsx)(t.strong,{children:"Foregrounding"}),"\xa0",(0,n.jsx)(t.strong,{children:"in Linux"}),'\nProcesses can run in two states: In the background and in the foreground. For example, commands that you run in your terminal such as "echo" or things of that sort will run in the foreground of your terminal as it is the only command provided that hasn\'t been told to run in the background. "Echo" is a great example as the output of echo will return to you in the foreground, but wouldn\'t in the background']}),"\n",(0,n.jsxs)(t.p,{children:["Here we're running ",(0,n.jsx)(t.code,{children:'echo "Hi THM"'}),"\xa0, where we expect the output to be returned to us like it is at the start. But after adding the ",(0,n.jsx)(t.code,{children:"&"})," operator to the command, we're instead just given the ID of the echo process rather than the actual output -- as it is running in the background."]}),"\n",(0,n.jsx)(t.p,{children:"This is great for commands such as copying files because it means that we can run the command in the background and continue on with whatever further commands we wish to execute (without having to wait for the file copy to finish first)"}),"\n",(0,n.jsxs)(t.p,{children:["We can do the exact same when executing things like scripts -- rather than relying on the & operator, we can use ",(0,n.jsx)(t.code,{children:"Ctrl + Z"}),' on our keyboard to background a process. It is also an effective way of "pausing" the execution of a script or command']}),"\n",(0,n.jsxs)(t.p,{children:['This script will keep on repeating "This will keep on looping until I stop!" until I stop or suspend the process. By using ',(0,n.jsx)(t.code,{children:"Ctrl + Z"})," (as indicated by ",(0,n.jsx)(t.strong,{children:"T^Z"}),"). Now our terminal is no longer filled up with messages -- until we foreground it, which we will discuss below."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Foregrounding a process"})}),"\n",(0,n.jsxs)(t.p,{children:['Now that we have a process running in the background, for example, our script "background.sh" which can be confirmed by using the ',(0,n.jsx)(t.code,{children:"ps aux"})," command, we can back-pedal and bring this process back to the foreground to interact with."]}),"\n",(0,n.jsxs)(t.p,{children:["With our process backgrounded using either ",(0,n.jsx)(t.code,{children:"Ctrl + Z"})," or the ",(0,n.jsx)(t.code,{children:"&"})," operator, we can use ",(0,n.jsx)(t.code,{children:"fg"})," to bring this back to focus like below, where we can see the ",(0,n.jsx)(t.code,{children:"fg"})," command is being used to bring the background process back into use on the terminal, where the output of the script is now returned to us."]}),"\n",(0,n.jsx)(t.h1,{id:"maintaining-your-system-automation",children:"Maintaining Your System: Automation"}),"\n",(0,n.jsx)(t.p,{children:"Users may want to schedule a certain action or task to take place after the system has booted."}),"\n",(0,n.jsx)(t.p,{children:"Crontab is one of the processes that is started during boot, which is responsible for facilitating and managing cron jobs."}),"\n",(0,n.jsxs)(t.p,{children:["A crontab is simply a special file with formatting that is recognised by the ",(0,n.jsx)(t.code,{children:"cron"})," process to execute each line step-by-step. Crontabs require 6 specific values:"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{}),(0,n.jsx)(t.th,{})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Value"}),(0,n.jsx)(t.td,{children:"Description"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"MIN"}),(0,n.jsx)(t.td,{children:"What minute to execute at"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"HOUR"}),(0,n.jsx)(t.td,{children:"What hour to execute at"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"DOM"}),(0,n.jsx)(t.td,{children:"What day of the month to execute at"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"MON"}),(0,n.jsx)(t.td,{children:"What month of the year to execute at"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"DOW"}),(0,n.jsx)(t.td,{children:"What day of the week to execute at"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"CMD"}),(0,n.jsx)(t.td,{children:"The actual command that will be executed."})]})]})]}),"\n",(0,n.jsx)(t.p,{children:'Let\'s use the example of backing up files. You may wish to backup "cmnatic"\'s\xa0 "Documents" every 12 hours. We would use the following formatting:\xa0'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"0 */12 * * * cp -R /home/cmnatic/Documents /var/backups/"})}),"\n",(0,n.jsxs)(t.p,{children:["An interesting feature of crontabs is that these also support the wildcard or asterisk (",(0,n.jsx)(t.code,{children:"*"}),"). If we do not wish to provide a value for that specific field, i.e. we don't care what month, day, or year it is executed -- only that it is executed every 12 hours, we simply just place an asterisk."]}),"\n",(0,n.jsxs)(t.p,{children:['This can be confusing to begin with, which is why there are some great resources such as the online "',(0,n.jsx)(t.a,{href:"https://crontab-generator.org/",children:"Crontab Generator"}),'" that allows you to use a friendly application to generate your formatting for you! As well as the site "',(0,n.jsx)(t.a,{href:"https://crontab.guru/",children:"Cron Guru"}),'"!']}),"\n",(0,n.jsxs)(t.p,{children:["Crontabs can be edited by using ",(0,n.jsx)(t.code,{children:"crontab -e"}),", where you can select an editor (such as Nano) to edit your crontab."]}),"\n",(0,n.jsx)(t.h1,{id:"maintaining-your-system-package-management",children:"Maintaining Your System: Package Management"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Managing Your Repositories (Adding and Removing)"}),"\nNormally we use the apt command to install software onto our Ubuntu system. The ",(0,n.jsx)(t.code,{children:"apt"})," command is a part of the package management software also named apt. Apt contains a whole suite of tools that allows us to manage the packages and sources of our software, and to install or remove software at the same time."]}),"\n",(0,n.jsxs)(t.p,{children:["One method of adding repositories is to use the\xa0",(0,n.jsx)(t.code,{children:"add-apt-repository"})," command we illustrated above, but we're going to\xa0walk through adding and removing a repository manually. Whilst you can install software through the use of package installers such as ",(0,n.jsx)(t.code,{children:"dpkg"}),", the benefits of apt means that whenever we update our system -- the repository that contains the pieces of software that we add also gets checked for updates.\xa0"]}),"\n",(0,n.jsx)(t.p,{children:"In this example, we're going to add the text editor Sublime Text to our Ubuntu machine as a repository as it is not a part of the default Ubuntu repositories. When adding software, the integrity of what we download is guaranteed by the use of what is called GPG (Gnu Privacy Guard) keys. These keys are essentially a safety check from the developers saying, \"here's our software\". If the keys do not match up to what your system trusts and what the developers used, then the software will not be downloaded."}),"\n",(0,n.jsx)(t.p,{children:"So, to start, we need to add the GPG key for the developers of Sublime Text 3."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"1."})," Let's download the GPG key and use apt-key to trust it:\xa0\xa0",(0,n.jsx)(t.code,{children:"wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -"})]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"2."})," Now that we have added this key to our trusted list, we can now add Sublime Text 3's repository to our apt sources list. A good practice is to have a separate file for every different community/3rd party repository that we add."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"2.1."})," Let's create a file named ",(0,n.jsx)(t.strong,{children:"sublime-text.list"})," in ",(0,n.jsx)(t.strong,{children:"/etc/apt/sources.list.d"})," and enter the repository information"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"2.2."})," And now use Nano or a text editor of your choice to add & save the Sublime Text 3 repository into this newly created file"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"2.3."})," After we have added this entry, we need to update apt to recognise this new entry -- this is done using the ",(0,n.jsx)(t.code,{children:"apt update"})," command"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"2.4."})," Once successfully updated, we can now proceed to install the software that we have trusted and added to apt using\xa0",(0,n.jsx)(t.code,{children:"apt install sublime-text"})]}),"\n",(0,n.jsxs)(t.p,{children:["Removing packages is as easy as reversing. This process is done by using the ",(0,n.jsx)(t.code,{children:"add-apt-repository --remove ppa:PPA_Name/ppa"})," command or by manually deleting the file that we previously added to. Once removed, we can just use ",(0,n.jsx)(t.code,{children:"apt remove [software-name-here]"})," i.e. ",(0,n.jsx)(t.code,{children:"apt remove sublime-text"})]}),"\n",(0,n.jsx)(t.h1,{id:"maintaining-your-system-logs",children:"Maintaining Your System: Logs"}),"\n",(0,n.jsx)(t.p,{children:'These files and folders contain logging information for applications and services running on your system. The Operating System\xa0 (OS) has become pretty good at automatically managing these logs in a process that is known as "rotating".'}),"\n",(0,n.jsx)(t.p,{children:"Some logs from three services running on a Ubuntu machine"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"An Apache2 web server"}),"\n",(0,n.jsx)(t.li,{children:"Logs for the fail2ban service, which is used to monitor attempted brute forces, for example"}),"\n",(0,n.jsx)(t.li,{children:"The UFW service which is used as a firewall"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"These services and logs are a great way in monitoring the health of your system and protecting it. Not only that, but the logs for services such as a web server contain information about every single request - allowing developers or administrators to diagnose performance issues or investigate an intruder's activity. For example, the two types of log files below that are of interest"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"access log"}),"\n",(0,n.jsx)(t.li,{children:"error log"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"There are, of course, logs that store information about how the OS is running itself and actions that are performed by users, such as authentication attempts."})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>a});var n=s(6540);const r={},o=n.createContext(r);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);