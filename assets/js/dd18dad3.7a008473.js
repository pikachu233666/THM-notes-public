"use strict";(self.webpackChunkTHM_Notes=self.webpackChunkTHM_Notes||[]).push([[7518],{3469:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>h});var n=i(4848),s=i(8453);const o={},a="General Methodology",l={id:"Others/Upload Vulnerabilities",title:"Upload Vulnerabilities",description:"- Overwriting existing files on a server",source:"@site/docs/Others/Upload Vulnerabilities.md",sourceDirName:"Others",slug:"/Others/Upload Vulnerabilities",permalink:"/docs/Others/Upload Vulnerabilities",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"THMSidebar",previous:{title:"Regular expressions",permalink:"/docs/Others/Regular expressions"},next:{title:"Vim",permalink:"/docs/Others/Vim"}},r={},h=[{value:"Reverse Shell",id:"reverse-shell",level:2},{value:"Extension Validation",id:"extension-validation",level:2},{value:"File Type Filtering",id:"file-type-filtering",level:2},{value:"File Length Filtering",id:"file-length-filtering",level:2},{value:"File Name Filtering",id:"file-name-filtering",level:2},{value:"File Content Filtering",id:"file-content-filtering",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"#Web"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Overwriting existing files on a server"}),"\n",(0,n.jsx)(t.li,{children:"Uploading and Executing Shells on a server"}),"\n",(0,n.jsx)(t.li,{children:"Bypassing Client-Side filtering"}),"\n",(0,n.jsx)(t.li,{children:"Bypassing various kinds of Server-Side filtering"}),"\n",(0,n.jsx)(t.li,{children:"Fooling content type validation checks"}),"\n"]}),"\n",(0,n.jsx)(t.h1,{id:"general-methodology",children:"General Methodology"}),"\n",(0,n.jsxs)(t.p,{children:["As with any kind of hacking, enumeration is key. The more we understand about our environment, the more we're able to ",(0,n.jsx)(t.em,{children:"do"})," with it. Looking at the source code for the page is good to see if any kind of client-side filtering is being applied. Scanning with a directory bruteforcer such as Gobuster is usually helpful in web attacks, and may reveal where files are being uploaded to. Intercepting upload requests with ",(0,n.jsx)(t.a,{href:"https://tryhackme.com/room/burpsuitebasics",children:"Burpsuite"})," will also come in handy. Browser extensions such as ",(0,n.jsx)(t.a,{href:"https://www.wappalyzer.com/download",children:"Wappalyser"})," can provide valuable information at a glance about the site you're targetting."]}),"\n",(0,n.jsx)(t.p,{children:"With a basic understanding of how the website might be handling our input, we can then try to poke around and see what we can and can't upload. If the website is employing client-side filtering then we can easily look at the code for the filter and look to bypass it."}),"\n",(0,n.jsx)(t.p,{children:"If the website has server-side filtering in place then we may need to take a guess at what the filter is looking for, upload a file, then try something slightly different based on the error message if the upload fails. Uploading files designed to provoke errors can help with this. Tools like Burpsuite or OWASP Zap can be very helpful at this stage."}),"\n",(0,n.jsx)(t.h1,{id:"overwriting-existing-files",children:"Overwriting Existing Files"}),"\n",(0,n.jsx)(t.p,{children:"When files are uploaded to the server, a range of checks should be carried out to ensure that the file will not overwrite anything which already exists on the server. Common practice is to assign the file with a new name -- often either random, or with the date and time of upload added to the start or end of the original filename. Alternatively, checks may be applied to see if the filename already exists on the server; if a file with the same name already exists then the server will return an error message asking the user to pick a different file name. File permissions also come into play when protecting existing files from being overwritten. Web pages, for example, should not be writeable to the web user, thus preventing them from being overwritten with a malicious version uploaded by an attacker."}),"\n",(0,n.jsx)(t.p,{children:"If, however, no such precautions are taken, then we might potentially be able to overwrite existing files on the server. Realistically speaking, the chances are that file permissions on the server will prevent this from being a serious vulnerability. That said, it could still be quite the nuisance, and is worth keeping an eye out for in a pentest or bug hunting environment."}),"\n",(0,n.jsx)(t.h1,{id:"remote-code-execution",children:"Remote Code Execution"}),"\n",(0,n.jsxs)(t.p,{children:["Remote Code Execution (as the name suggests) would allow us to execute code arbitrarily on the web server. Whilst this is likely to be as a low-privileged web user account (such as ",(0,n.jsx)(t.code,{children:"www-data"})," on Linux servers), it's still an extremely serious vulnerability. Remote code execution via an upload vulnerability in a web application tends to be exploited by uploading a program written in the same language as the back-end of the website (or another language which the server understands and will execute). Traditionally this would be PHP, however, in more recent times, other back-end languages have become more common (Python Django and Javascript in the form of Node.js being prime examples). It's worth noting that in a ",(0,n.jsx)(t.em,{children:"routed"})," application (i.e. an application where the routes are defined programmatically rather than being mapped to the file-system), this method of attack becomes a lot more complicated and a lot less likely to occur. Most modern web frameworks are routed programmatically."]}),"\n",(0,n.jsx)(t.p,{children:"There are two basic ways to achieve RCE on a webserver when exploiting a file upload vulnerability: webshells, and reverse/bind shells. Realistically a fully featured reverse/bind shell is the ideal goal for an attacker; however, a webshell may be the only option available (for example, if a file length limit has been imposed on uploads, or if firewall rules prevent any network-based shells). As a general methodology, we would be looking to upload a shell of one kind or another, then activating it, either by navigating directly to the file if the server allows it (non-routed applications with inadequate restrictions), or by otherwise forcing the webapp to run the script for us (necessary in routed applications)."}),"\n",(0,n.jsxs)(t.p,{children:["We start with a gobuster scan.\nLooks like we've got two directories here -- ",(0,n.jsx)(t.code,{children:"uploads"})," and ",(0,n.jsx)(t.code,{children:"assets"}),'. Of these, it seems likely that any files we upload will be placed in the "uploads" directory.\nWe can try to upload a webshell.\nAs it is, we know that this webserver is running with a PHP back-end, so we\'ll skip straight to creating and uploading the shell. In real life, we may need to do a little more enumeration; however, PHP is a good place to start regardless.']}),"\n",(0,n.jsx)(t.p,{children:"A simple webshell works by taking a parameter and executing it as a system command. In PHP, the syntax for this would be"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:'<?php \n\techo system($_GET["cmd]);\n?>\n'})}),"\n",(0,n.jsx)(t.p,{children:"This code takes a GET parameter and executes it as a system command. It then echoes the output out to the screen."}),"\n",(0,n.jsx)(t.p,{children:"We could now use this shell to read files from the system, or upgrade from here to a reverse shell. Now that we have RCE, the options are limitless. Note that when using webshells, it's usually easier to view the output by looking at the source code of the page. This drastically improves the formatting of the output."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"reverse-shell",children:"Reverse Shell"}),"\n",(0,n.jsx)(t.p,{children:"We'll be using the ubiquitous Pentest Monkey reverse shell (/usr/share/webshells/php/php-reverse-shell.php)."}),"\n",(0,n.jsxs)(t.p,{children:["You will need to edit line 49 of the shell. It will currently say ",(0,n.jsx)(t.code,{children:"$ip = '127.0.0.1';\xa0 // CHANGE THIS   "}),"\xa0-- as it instructs, change ",(0,n.jsx)(t.code,{children:"127.0.0.1"})," to your  IP address."]}),"\n",(0,n.jsxs)(t.p,{children:["With the shell edited, the next thing we need to do is start a Netcat listener to receive the connection. ",(0,n.jsx)(t.code,{children:"nc -lvnp 1234"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Now, let's upload the shell, then activate it by navigating to ",(0,n.jsx)(t.code,{children:"http://demo.uploadvulns.thm/uploads/shell.php"}),". The name of the shell will obviously be whatever you called it (",(0,n.jsx)(t.code,{children:"php-reverse-shell.php"})," by default)."]}),"\n",(0,n.jsx)(t.h1,{id:"filtering",children:"Filtering"}),"\n",(0,n.jsx)(t.p,{children:"We'll be looking at some of the defence mechanisms used to prevent malicious file uploads, and how to circumvent them."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsxs)(t.p,{children:["First up, let's discuss the differences between ",(0,n.jsx)(t.em,{children:"client"}),"-side filtering and ",(0,n.jsx)(t.em,{children:"server"}),"-side filtering."]}),"\n",(0,n.jsxs)(t.p,{children:["When we talk about a script being \"Client-Side\", in the context of web applications, we mean that it's running in the user's browser as opposed to on the web server itself. JavaScript is pretty much ubiquitous as the client-side scripting language, although alternatives do exist.\xa0 Regardless of the language being used, a client-side script will be run in your web browser. In the context of file-uploads, this means that the filtering occurs before the file is even uploaded to the server. However, because the filtering is happening on ",(0,n.jsx)(t.em,{children:"our"})," computer, it is trivially easy to bypass. As such client-side filtering by itself is a highly insecure method of verifying that an uploaded file is not malicious."]}),"\n",(0,n.jsxs)(t.p,{children:["Conversely, as you may have guessed, a ",(0,n.jsx)(t.em,{children:"server"}),"-side script will be run on the server. Traditionally PHP was the predominant server-side language (with Microsoft's ASP for IIS coming in close second); however, in recent years, other options (C#, Node.js, Python, Ruby on Rails, and a variety of others) have become more widely used. Server-side filtering tends to be more difficult to bypass, as you don't have the code in front of you. As the code is executed on the server, in most cases it will also be impossible to bypass the filter completely; instead we have to form a payload which conforms to the filters in place, but still allows us to execute our code."]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h2,{id:"extension-validation",children:"Extension Validation"}),"\n",(0,n.jsxs)(t.p,{children:["File extensions are used (in theory) to identify the contents of a file. In practice they are very easy to change, so actually don't mean much; however, MS Windows still uses them to identify file types, although Unix based systems tend to rely on other methods, filters that check for extensions work in one of two ways. They either ",(0,n.jsx)(t.em,{children:"blacklist"})," extensions (i.e. have a list of extensions which are ",(0,n.jsx)(t.strong,{children:"not"})," allowed) or they ",(0,n.jsx)(t.em,{children:"whitelist"})," extensions (i.e. have a list of extensions which ",(0,n.jsx)(t.strong,{children:"are"})," allowed, and reject everything else)."]}),"\n",(0,n.jsx)(t.h2,{id:"file-type-filtering",children:"File Type Filtering"}),"\n",(0,n.jsx)(t.p,{children:"Similar to Extension validation, but more intensive, file type filtering looks, once again, to verify that the contents of a file are acceptable to upload. We'll be looking at two types of file type validation"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"MIME validation:"})," MIME (",(0,n.jsx)(t.strong,{children:"M"}),"ultipurpose ",(0,n.jsx)(t.strong,{children:"I"}),"nternet ",(0,n.jsx)(t.strong,{children:"M"}),"ail ",(0,n.jsx)(t.strong,{children:"E"}),"xtension) types are used as an identifier for files -- originally when transfered as attachments over email, but now also when files are being transferred over HTTP(S). The MIME type for a file upload is attached in the header of the request"]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:'MIME types follow the format /. As a legitimate JPEG image, the MIME type for this upload was "image/jpeg". The MIME type for a file can be checked client-side and/or server-side; however, as MIME is based on the extension of the file, this is extremely easy to bypass.'}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Magic Number validation**:**"}),' Magic numbers are the more accurate way of determining the contents of a file; although, they are by no means impossible to fake. The "magic number" of a file is a string of bytes at the very beginning of the file content which identify the content. For example, a PNG file would have these bytes at the very top of the file: ',(0,n.jsx)(t.code,{children:"89 50 4E 47 0D 0A 1A 0A"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Unlike Windows, Unix systems use magic numbers for identifying files; however, when dealing with file uploads, it is possible to check the magic number of the uploaded file to ensure that it is safe to accept. This is by no means a guaranteed solution, but it's more effective than checking the extension of a file."}),"\n",(0,n.jsx)(t.h2,{id:"file-length-filtering",children:"File Length Filtering"}),"\n",(0,n.jsx)(t.p,{children:"File length filters are used to prevent huge files from being uploaded to the server via an upload form (as this can potentially starve the server of resources). In most cases this will not cause us any issues when we upload shells; however, it's worth bearing in mind that if an upload form only expects a very small file to be uploaded, there may be a length filter in place to ensure that the file length requirement is adhered to. As an example, our fully fledged PHP reverse shell from the previous task is 5.4Kb big -- relatively tiny, but if the form expects a maximum of 2Kb then we would need to find an alternative shell to upload."}),"\n",(0,n.jsx)(t.h2,{id:"file-name-filtering",children:"File Name Filtering"}),"\n",(0,n.jsxs)(t.p,{children:['As touched upon previously, files uploaded to a server should be unique. Usually this would mean adding a random aspect to the file name, however, an alternative strategy would be to check if a file with the same name already exists on the server, and give the user an error if so. Additionally, file names should be sanitised on upload to ensure that they don\'t contain any "bad characters", which could potentially cause problems on the file system when uploaded (e.g. null bytes or forward slashes on Linux, as well as control characters such as ',(0,n.jsx)(t.code,{children:";"})," and potentially unicode characters). What this means for us is that, on a well administered system, our uploaded files are unlikely to have the same name we gave them before uploading, so be aware that you may have to go hunting for your shell in the event that you manage to bypass the content filtering."]}),"\n",(0,n.jsx)(t.h2,{id:"file-content-filtering",children:"File Content Filtering"}),"\n",(0,n.jsx)(t.p,{children:"More complicated filtering systems may scan the full contents of an uploaded file to ensure that it's not spoofing its extension, MIME type and Magic Number. This is a significantly more complex process than the majority of basic filtration systems employ."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.p,{children:"It's worth noting that none of these filters are perfect by themselves -- they will usually be used in conjunction with each other, providing a multi-layered filter, thus increasing the security of the upload significantly. Any of these filters can all be applied client-side, server-side, or both."}),"\n",(0,n.jsxs)(t.p,{children:["Similarly, different frameworks and languages come with their own inherent methods of filtering and validating uploaded files. As a result, it is possible for language specific exploits to appear; for example, until PHP major version five, it was possible to bypass an extension filter by appending a null byte, followed by a valid extension, to the malicious ",(0,n.jsx)(t.code,{children:".php"})," file. More recently it was also possible to inject PHP code into the exif data of an otherwise valid image file, then force the server to execute it."]}),"\n",(0,n.jsx)(t.h1,{id:"bypassing-client-side-filtering",children:"Bypassing Client-Side Filtering"}),"\n",(0,n.jsx)(t.p,{children:"There are four easy ways to bypass your average client-side file upload filter"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Turn off Javascript in your browser"})," -- this will work provided the site doesn't require Javascript in order to provide basic functionality. If turning off Javascript completely will prevent the site from working at all then one of the other methods would be more desirable; otherwise, this can be an effective way of completely bypassing the client-side filter."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Intercept and modify the incoming page."})," Using Burpsuite, we can intercept the incoming web page and strip out the Javascript filter before it has a chance to run."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Intercept and modify the file upload"}),". Where the previous method works ",(0,n.jsx)(t.em,{children:"before"})," the webpage is loaded, this method allows the web page to load as normal, but intercepts the file upload after it's already passed (and been accepted by the filter)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.em,{children:"Send the file directly to the upload point."})," Why use the webpage with the filter, when you can send the file directly using a tool like ",(0,n.jsx)(t.code,{children:"curl"}),"? Posting the data directly to the page which contains the code for handling the file upload is another effective method for completely bypassing a client side filter.The syntax for such a command would look something like this: ",(0,n.jsx)(t.code,{children:'curl -X POST -F "submit:<value>" -F "<file-parameter>:@<path-to-file>" <site>'}),". To use this method you would first aim to intercept a successful upload (using Burpsuite or the browser console) to see the parameters being used in the upload, which can then be slotted into the above command."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["In this instance we can see that the filter is using a ",(0,n.jsx)(t.em,{children:"whitelist"})," to exclude any MIME type that isn't ",(0,n.jsx)(t.code,{children:"image/jpeg"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Our next step is to attempt a file upload -- as expected, if we choose a JPEG, the function accepts it. Anything else and the upload is rejected."}),"\n",(0,n.jsxs)(t.p,{children:["Having established this, let's start ",(0,n.jsx)(t.a,{href:"https://blog.tryhackme.com/setting-up-burp/",children:"Burpsuite"})," and reload the page. We will see our own request to the site, but what we really want to see is the server's ",(0,n.jsx)(t.em,{children:"response"}),', so right click on the intercepted data, scroll down to "Do Intercept", then select "Response to this request"']}),"\n",(0,n.jsx)(t.p,{children:'When we click the "Forward" button at the top of the window, we will then see the server\'s response to our request. Here we can delete, comment out, or otherwise break the Javascript function before it has a chance to load'}),"\n",(0,n.jsx)(t.p,{children:'Having deleted the function, we once again click "Forward" until the site has finished loading, and are now free to upload any kind of file to the website'}),"\n",(0,n.jsxs)(t.p,{children:['When using burpsuite to bypass, it\'s worth noting here that Burpsuite will not, by default, intercept any external Javascript files that the web page is loading. If you need to edit a script which is not inside the main page being loaded, you\'ll need to go to the "Options" tab at the top of the Burpsuite window, then under the "Intercept Client Requests" section, edit the condition of the first line to remove ',(0,n.jsx)(t.code,{children:"^js$|"})]}),"\n",(0,n.jsx)(t.p,{children:"We can bypass this filter by uploading a file with a legitimate extension and MIME type, then intercepting and correcting the upload with Burpsuite."}),"\n",(0,n.jsx)(t.p,{children:'Having reloaded the webpage to put the filter back in place, let\'s take the reverse shell that we used before and rename it to be called "shell.jpg". As the MIME type (based on the file extension) automatically checks out, the Client-Side filter lets our payload through without complaining.'}),"\n",(0,n.jsx)(t.p,{children:'Once again we\'ll activate our Burpsuite intercept, then click "Upload" and catch the request.'}),"\n",(0,n.jsxs)(t.p,{children:["Observe that the MIME type of our PHP shell is currently ",(0,n.jsx)(t.code,{children:"image/jpeg"}),". We'll change this to ",(0,n.jsx)(t.code,{children:"text/x-php"}),", and the file extension from ",(0,n.jsx)(t.code,{children:".jpg"})," to ",(0,n.jsx)(t.code,{children:".php"}),", then forward the request to the server."]}),"\n",(0,n.jsxs)(t.p,{children:["Now, when we navigate to ",(0,n.jsx)(t.code,{children:"http://demo.uploadvulns.thm/uploads/shell.php"})," having set up a netcat listener, we receive a connection from the shell."]}),"\n",(0,n.jsx)(t.h1,{id:"bypassing-server-side-filtering-file-extensions",children:"Bypassing Server-Side Filtering: File Extensions"}),"\n",(0,n.jsx)(t.p,{children:"a website that's using a blacklist for file extensions as a server side filter. There are a variety of different ways that this could be coded, and the bypass we use is dependent on that. In the real world we wouldn't be able to see the code for this, but for this example, it will be included here"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:'<?php   \xa0\xa0\xa0 \n\t//Get the extension   \xa0\xa0\xa0 \n\t$extension = pathinfo($_FILES["fileToUpload"]["name"])["extension"];   \xa0\xa0\xa0 \n\t//Check the extension against the blacklist -- .php and .phtml   \xa0\xa0\xa0 \n\tswitch($extension){   \xa0\xa0\xa0 \xa0\xa0\xa0 \n\t\tcase "php":   \xa0\xa0\xa0 \xa0\xa0\xa0 \n\t\tcase "phtml":   \xa0\xa0\xa0 \xa0\xa0\xa0 \n\t\tcase NULL:   \xa0\xa0\xa0 \xa0\xa0\xa0 \xa0\xa0\xa0 \n\t\t\t$uploadFail = True;   \xa0\xa0\xa0 \xa0\xa0\xa0 \xa0\xa0\xa0 \n\t\t\tbreak;   \xa0\xa0\xa0 \xa0\xa0\xa0 \n\t\tdefault:   \xa0\xa0\xa0 \xa0\xa0\xa0 \xa0\xa0\xa0 \n\t\t\t$uploadFail = False;   \xa0\xa0\xa0 \n\t}   \n?>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["In this instance, the code is looking for the last period (",(0,n.jsx)(t.code,{children:"."}),") in the file name and uses that to confirm the extension, so that is what we'll be trying to bypass here. Other ways the code could be working include: searching for the first period in the file name, or splitting the file name at each period and checking to see if any blacklisted extensions show up."]}),"\n",(0,n.jsxs)(t.p,{children:["We can see that the code is filtering out the ",(0,n.jsx)(t.code,{children:".php"})," and ",(0,n.jsx)(t.code,{children:".phtml"})," extensions, so if we want to upload a PHP script we're going to have to find another extension. The ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/PHP",children:"wikipedia page"})," for PHP gives us a few common extensions that we can try; however, there are actually a variety of other more rarely used extensions available that webservers may nonetheless still recognise. These include: ",(0,n.jsx)(t.code,{children:".php3"}),", ",(0,n.jsx)(t.code,{children:".php4"}),", ",(0,n.jsx)(t.code,{children:".php5"}),", ",(0,n.jsx)(t.code,{children:".php7"}),", ",(0,n.jsx)(t.code,{children:".phps"}),", ",(0,n.jsx)(t.code,{children:".php-s"}),", ",(0,n.jsx)(t.code,{children:".pht"})," and ",(0,n.jsx)(t.code,{children:".phar"}),". Many of these bypass the filter (which only blocks",(0,n.jsx)(t.code,{children:".php"})," and ",(0,n.jsx)(t.code,{children:".phtml"}),"), but it appears that the server is configured not to recognise them as PHP files."]}),"\n",(0,n.jsx)(t.p,{children:"This is actually the default for Apache2 servers; however, the sysadmin may have changed the default configuration (or the server may be out of date), so it's well worth trying."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.p,{children:"Let's have a look at another example, with a different filter. This time we'll do it completely black-box."}),"\n",(0,n.jsx)(t.p,{children:"From here we enumerate further, trying the techniques from above and just generally trying to get an idea of what the filter will accept or reject."}),"\n",(0,n.jsx)(t.p,{children:"In this case we find that there are no shell extensions that both execute, and are not filtered, so it's back to the drawing board."}),"\n",(0,n.jsxs)(t.p,{children:["In the previous example we saw that the code was using the ",(0,n.jsx)(t.code,{children:"pathinfo()"})," PHP function to get the last few characters after the ",(0,n.jsx)(t.code,{children:"."}),", but what happens if it filters the input slightly differently."]}),"\n",(0,n.jsxs)(t.p,{children:["Let's try uploading a file called ",(0,n.jsx)(t.code,{children:"shell.jpg.php"}),". We already know that JPEG files are accepted, so what if the filter is just checking to see if the ",(0,n.jsx)(t.code,{children:".jpg"})," file extension is somewhere within the input."]}),"\n",(0,n.jsx)(t.p,{children:"Pseudocode for this kind of filter may look something like this"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-Pseudocode",children:'ACCEPT FILE FROM THE USER -- SAVE FILENAME IN VARIABLE userInput   \nIF STRING ".jpg" IS IN VARIABLE userInput:\n\tSAVE THE FILE   \nELSE:   \xa0\xa0\xa0 \nRETURN ERROR MESSAGE\n'})}),"\n",(0,n.jsx)(t.p,{children:"When we try to upload our file we get a success message."}),"\n",(0,n.jsx)(t.h1,{id:"bypassing-server-side-filtering-magic-numbers",children:"Bypassing Server-Side Filtering: Magic Numbers"}),"\n",(0,n.jsx)(t.p,{children:"Magic numbers are used as a more accurate identifier of files. The magic number of a file is a string of hex digits, and is always the very first thing in a file. Knowing this, it's possible to use magic numbers to validate file uploads, simply by reading those first few bytes and comparing them against either a whitelist or a blacklist. Bear in mind that this technique can be very effective against a PHP based webserver; however, it can sometimes fail against other types of webserver (hint)."}),"\n",(0,n.jsx)(t.p,{children:"As expected, if we upload our standard shell.php file, we get an error; however, if we upload a JPEG, the website is fine with it. All running as per expected so far."}),"\n",(0,n.jsxs)(t.p,{children:["From the previous attempt at an upload, we know that JPEG files are accepted, so let's try adding the JPEG magic number to the top of our ",(0,n.jsx)(t.code,{children:"shell.php"})," file. A quick look at the ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/List_of_file_signatures",children:"list of file signatures on Wikipedia"})," shows us that there are several possible magic numbers of JPEG files. It shouldn't matter which we use here, so let's just pick one (",(0,n.jsx)(t.code,{children:"FF D8 FF DB"}),"). We could add the ASCII representation of these digits (\xff\xd8\xff\xdb) directly to the top of the file but it's often easier to work directly with the hexadecimal representation, so let's cover that method."]}),"\n",(0,n.jsxs)(t.p,{children:["Before we get started, let's use the Linux ",(0,n.jsx)(t.code,{children:"file"})," command to check the file type of our shell, as expected, the command tells us that the filetype is PHP\n",(0,n.jsx)(t.code,{children:"file shell.php"})]}),"\n",(0,n.jsx)(t.p,{children:"We can see that the magic number we've chosen is four bytes long, so let's open up the reverse shell script and add four random characters on the first line. These characters do not matter, so for this example we'll just use four \"A\"s."}),"\n",(0,n.jsxs)(t.p,{children:["Save the file and exit. Next we're going to reopen the file in ",(0,n.jsx)(t.code,{children:"hexeditor"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Note the four bytes in the red box: they are all ",(0,n.jsx)(t.code,{children:"41"}),', which is the hex code for a capital "A" -- exactly what we added at the top of the file previously.']}),"\n",(0,n.jsxs)(t.p,{children:["Change this to the magic number we found earlier for JPEG files: ",(0,n.jsx)(t.code,{children:"FF D8 FF DB"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Now if we save and exit the file (Ctrl + x), we can use ",(0,n.jsx)(t.code,{children:"file"})," once again, and see that we have successfully spoofed the filetype of our shell"]}),"\n",(0,n.jsx)(t.h1,{id:"example-methodology",children:"Example Methodology"}),"\n",(0,n.jsx)(t.p,{children:"We've been given a website to perform a security audit on."}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["The first thing we would do is take a look at the website as a whole. Using browser extensions such as the aforementioned Wappalyzer (or by hand) we would look for indicators of what languages and frameworks the web application might have been built with. Be aware that Wappalyzer is not always 100% accurate. A good start to enumerating this manually would be by making a request to the website and intercepting the response with Burpsuite. Headers such as ",(0,n.jsx)(t.code,{children:"server"})," or ",(0,n.jsx)(t.code,{children:"x-powered-by"})," can be used to gain information about the server. We would also be looking for vectors of attack, like, for example, an upload page."]}),"\n",(0,n.jsx)(t.li,{children:"Having found an upload page, we would then aim to inspect it further. Looking at the source code for client-side scripts to determine if there are any client-side filters to bypass would be a good thing to start with, as this is completely in our control."}),"\n",(0,n.jsxs)(t.li,{children:["We would then attempt a completely innocent file upload. From here we would look to see how our file is accessed. In other words, can we access it directly in an uploads folder? Is it embedded in a page somewhere? What's the naming scheme of the website? This is where tools such as Gobuster might come in if the location is not immediately obvious. This step is extremely important as it not only improves our knowledge of the virtual landscape we're attacking, it also gives us a baseline \"accepted\" file which we can base further testing on.","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["An important Gobuster switch here is the ",(0,n.jsx)(t.code,{children:"-x"})," switch, which can be used to look for files with specific extensions. For example, if you added ",(0,n.jsx)(t.code,{children:"-x php,txt,html"})," to your Gobuster command, the tool would append ",(0,n.jsx)(t.code,{children:".php"}),", ",(0,n.jsx)(t.code,{children:".txt"}),", and ",(0,n.jsx)(t.code,{children:".html"})," to each word in the selected wordlist, one at a time. This can be very useful if you've managed to upload a payload and the server is changing the name of uploaded files."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.li,{children:"Having ascertained how and where our uploaded files can be accessed, we would then attempt a malicious file upload, bypassing any client-side filters we found in step two. We would expect our upload to be stopped by a server side filter, but the error message that it gives us can be extremely useful in determining our next steps."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Assuming that our malicious file upload has been stopped by the server, here are some ways to ascertain what kind of server-side filter may be in place"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["If you can successfully upload a file with a totally invalid file extension (e.g. ",(0,n.jsx)(t.code,{children:"testingimage.invalidfileextension"}),") then the chances are that the server is using an extension ",(0,n.jsx)(t.em,{children:"blacklist"})," to filter out executable files. If this upload fails then any extension filter will be operating on a whitelist."]}),"\n",(0,n.jsx)(t.li,{children:"Try re-uploading your originally accepted innocent file, but this time change the magic number of the file to be something that you would expect to be filtered. If the upload fails then you know that the server is using a magic number based filter."}),"\n",(0,n.jsx)(t.li,{children:"As with the previous point, try to upload your innocent file, but intercept the request with Burpsuite and change the MIME type of the upload to something that you would expect to be filtered. If the upload fails then you know that the server is filtering based on MIME types."}),"\n",(0,n.jsx)(t.li,{children:"Enumerating file length filters is a case of uploading a small file, then uploading progressively bigger files until you hit the filter. At that point you'll know what the acceptable limit is. If you're very lucky then the error message of original upload may outright tell you what the size limit is. Be aware that a small file length limit may prevent you from uploading the reverse shell we've been using so far."}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>l});var n=i(6540);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);