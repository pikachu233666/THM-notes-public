"use strict";(self.webpackChunkTHM_Notes=self.webpackChunkTHM_Notes||[]).push([[3448],{2539:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var i=n(4848),o=n(8453);const s={},r="Request time Extension",a={id:"Jr Penetration Tester/Burp Suite/Extensions",title:"Extensions",description:"Burp_Suite #tools",source:"@site/docs/Jr Penetration Tester/Burp Suite/Extensions.md",sourceDirName:"Jr Penetration Tester/Burp Suite",slug:"/Jr Penetration Tester/Burp Suite/Extensions",permalink:"/docs/Jr Penetration Tester/Burp Suite/Extensions",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"THMSidebar",previous:{title:"Walking An Application",permalink:"/docs/Jr Penetration Tester/Introduction to Web Hacking/Walking An Application"},next:{title:"Intruder",permalink:"/docs/Jr Penetration Tester/Burp Suite/Intruder"}},u={},h=[];function c(e){const t={a:"a",h1:"h1",img:"img",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"#Web #Burp_Suite #tools"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"Extensions",src:n(355).A+"",width:"1094",height:"702"})}),"\n",(0,i.jsx)(t.p,{children:"Extensions are applied in descending order, starting from the top of the list and moving down."}),"\n",(0,i.jsx)(t.p,{children:"With Java and Python being the most common choices. Java extensions integrate automatically with the Burp Suite framework, while Python extensions require the Jython interpreter."}),"\n",(0,i.jsx)(t.h1,{id:"request-time-extension",children:"Request time Extension"}),"\n",(0,i.jsxs)(t.p,{children:["It enables us to log the time it takes for each request to receive a response. This functionality is particularly useful for identifying and exploiting time-based vulnerabilities.\n",(0,i.jsx)(t.a,{href:"https://github.com/portswigger/request-timer",children:"Request Time"})]}),"\n",(0,i.jsx)(t.h1,{id:"jython",children:"Jython"}),"\n",(0,i.jsxs)(t.p,{children:["To use Python modules in Burp Suite, we need to include the Jython Interpreter JAR file, which is a Java implementation of Python. The Jython Interpreter enables us to run Python-based extensions within Burp Suite.\n",(0,i.jsx)(t.a,{href:"https://www.jython.org/download",children:"Jython"})]}),"\n",(0,i.jsxs)(t.p,{children:["Open Burp Suite and switch to the ",(0,i.jsx)(t.strong,{children:"Extensions"})," module. Then, go to the ",(0,i.jsx)(t.strong,{children:"Extensions settings"}),' sub-tab. Scroll down to the "Python environment" section. In the "Location of Jython standalone JAR file" field, set the path to the downloaded Jython JAR file.']}),"\n",(0,i.jsx)(t.h1,{id:"the-burp-suite-api",children:"The Burp Suite API"}),"\n",(0,i.jsx)(t.p,{children:"In the Burp Suite Extensions module, you have access to a wide range of API endpoints that allow you to create and integrate your modules with Burp Suite. These APIs expose various functionalities, enabling you to extend the capabilities of Burp Suite to suit your specific needs."}),"\n",(0,i.jsx)(t.p,{children:"Burp Suite supports multiple languages for writing extensions: Java (Natively), Python (via Jython), Ruby (via JRuby)"})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},355:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/Extensions_1-620352e280349265829076f415c7d453.png"},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(6540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);