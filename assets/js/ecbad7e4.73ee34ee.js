"use strict";(self.webpackChunkTHM_Notes=self.webpackChunkTHM_Notes||[]).push([[2808],{2429:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(4848),i=t(8453);const o={},a="Docker",r={id:"Others/Intro to Containerisation",title:"Intro to Containerisation",description:"Concept",source:"@site/docs/Others/Intro to Containerisation.md",sourceDirName:"Others",slug:"/Others/Intro to Containerisation",permalink:"/docs/Others/Intro to Containerisation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"THMSidebar",previous:{title:"GoogleDorking",permalink:"/docs/Others/GoogleDorking"},next:{title:"Intro to Docker",permalink:"/docs/Others/Intro to Docker"}},c={},l=[];function h(e){const n={code:"code",h1:"h1",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"#tools #Concept"}),"\n",(0,s.jsx)(n.p,{children:"In computing terms, containerisation is the process of packaging an application and the necessary resources (such as libraries and packages) required into one package named a container. The process of packaging applications together makes applications considerably portable and hassle-free to run."}),"\n",(0,s.jsx)(n.p,{children:"Modern applications are often complex and usually depend on frameworks and libraries being installed on a device before the application can run. These dependencies can"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Be difficult to install depending on the environment the application is running (some operating systems might not even support them!)"}),"\n",(0,s.jsx)(n.li,{children:"Create difficulty for developers to diagnose and replicate faults, as it could be a problem with the application's environment - not the application itself!"}),"\n",(0,s.jsx)(n.li,{children:"Can often conflict with each other. For example, having multiple versions of Python to run different applications is a headache for the user, and an application may work with one version of Python and not another."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Containerisation platforms remove this headache by packaging the dependencies together and \u201cisolating\u201d (",(0,s.jsx)(n.strong,{children:"note:"}),' this is not to be confused with "security isolation" in this context) the application\u2019s environment.']}),"\n",(0,s.jsx)(n.p,{children:"If the device supports the containerisation engine, a user will be able to run the application and have the same behaviours."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"container",src:t(3721).A+"",width:"1198",height:"960"})}),"\n",(0,s.jsx)(n.p,{children:"We can see how three applications and their environments (such as dependencies) are packaged together and do not directly interact with the physical computer - but rather the containerisation engine."}),"\n",(0,s.jsx)(n.p,{children:"However, it is worth noting that containerisation platforms make use of the \u201cnamespace\u201d feature of the kernel, which is a feature used so that processes can access resources of the operating system without being able to interact with other processes."}),"\n",(0,s.jsx)(n.p,{children:"The isolation offered by namespaces adds a benefit of security because it means that if an application in the container is compromised, usually (unless they share the same namespace), other containers are unaffected."}),"\n",(0,s.jsx)(n.p,{children:"Alternatives such as virtual machines will require a whole operating system being installed to run the application (taking up large amounts of disk space and other computing resources such as CPU and RAM)."}),"\n",(0,s.jsx)(n.h1,{id:"docker",children:"Docker"}),"\n",(0,s.jsx)(n.p,{children:"Docker is a relatively hassle-free, extensive and open source containerisation platform. The Docker ecosystem allows applications (images) to be deployed, managed and shared with ease."}),"\n",(0,s.jsx)(n.p,{children:"Docker employs the same technology used in containerisation to isolate applications into containers called the Docker Engine. The Docker Engine is essentially an API that runs on the host operating system, which communicates between the operating system and containers to access the system\u2019s hardware (such as CPU, RAM, networking and disk)."}),"\n",(0,s.jsx)(n.p,{children:"Because of this, the Docker engine is extensive and allows you to do things like"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Connect containers together (for example, a container running a web application and another container running a database)"}),"\n",(0,s.jsx)(n.li,{children:"Export and import applications (images)"}),"\n",(0,s.jsx)(n.li,{children:"Transfer files between the operating system and container"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Docker uses the programming syntax YAML to allow developers to instruct how a container should be built and what is run. This is a significant reason why Docker is so portable and easy to debug; share the instructions, and it will build and run the same on any device that supports the Docker Engine."}),"\n",(0,s.jsx)(n.p,{children:"The Docker engine allows containers to be orchestrated, meaning that multiple containers can be built as part of a group, allowing containers to communicate with each other (for example, one container running a web server and another container running a database can communicate)."}),"\n",(0,s.jsx)(n.h1,{id:"the-benefits--features-of-docker",children:"The Benefits & Features of Docker"}),"\n",(0,s.jsx)(n.p,{children:"Docker is an agile, convenient and extensive means of deploying an application."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Free"}),"\n",(0,s.jsx)(n.li,{children:"Compatible"}),"\n",(0,s.jsx)(n.li,{children:"Efficient & Minimal"}),"\n",(0,s.jsx)(n.li,{children:"Easy to Get Started With"}),"\n",(0,s.jsx)(n.li,{children:"Easy to Share With Others"}),"\n",(0,s.jsx)(n.li,{children:"Cheap to Run"}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"the-process-of-containerisation-work",children:"The process of Containerisation Work"}),"\n",(0,s.jsx)(n.p,{children:"Namespaces essentially segregate system resources such as processes, files and memory away from other namespaces."}),"\n",(0,s.jsx)(n.p,{children:"Every process running on\xa0Linux\xa0will be assigned two things"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A namespace"}),"\n",(0,s.jsx)(n.li,{children:"A process identifier (PID)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:'Namespaces are how containerisation is achieved! Processes can only "see" other processes that are in the same namespace - no conflicts in theory.\xa0Take Docker, for example, every new container will be running as a new namespace, although the container may be running multiple applications (and in turn, processes).'}),"\n",(0,s.jsxs)(n.p,{children:["The process with an ID of 0 is the process that is started when the system boots. Process numbers increment and must be started by another process, so naturally, the next process ID will be #1. This process is the systems\xa0",(0,s.jsx)(n.code,{children:"init"}),"\xa0, for example, the latest versions of Ubuntu use\xa0",(0,s.jsx)(n.code,{children:"systemd"}),". Any other process that runs will be controlled by\xa0",(0,s.jsx)(n.code,{children:"systemd"}),"\xa0(process #1)."]}),"\n",(0,s.jsx)(n.p,{children:"We can use process #1's namespace on an operating system to escalate our privileges.\xa0Whilst containers are designed to use these namespaces to isolate from each other, they can instead coincide with the host computer's processes... This gives us a nice opportunity to escape."}),"\n",(0,s.jsxs)(n.p,{children:["We can use ",(0,s.jsx)(n.code,{children:"ps aux"})," to view the list of running processes."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},3721:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Intro_to_Containerisation_1-3c383e3e2a629611f2ce001e36a0e773.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);